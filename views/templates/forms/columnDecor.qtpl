{% import (
    "fmt"
	"go/types"
	"sort"
	"strings"

	"github.com/ruslanBik4/httpgo/views/templates/json"
)
%}
{% collapsespace %}
{% stripspace %}

{% func (col *ColumnDecor) ToJSON() %}
{
        {% code
            values := col.GetValues()
        %}

        "name": "{%s= col.InputName(-1) %}",
        "required": {%v col.Required() %},
         {% if col.patternDesc > "" %}
             "error": {
                "pattern": "{%s= col.patternDesc %}",
                "message": "{%s= col.patternDesc %}"
             },
         {% endif %}

        {% if p := col.Suggestions; p > "" %}
          "suggestions":{
                "url":"{%j= p %}"
                 {% for name, val := range col.SuggestionsParams %}
                   , "{%j= name %}": {%= json.Element(val)%}
                 {% endfor %}
          },
            {% if d := col.DefaultInputValue; d > "" %}
                "defaultInputValue": "{%j= d %}",
            {% endif %}
        {% elseif p := col.Pattern(); p > "" %}
          "pattern":"{%j= p %}",
        {% endif %}

         {% if col.IsSlice %}
           {% if col.multiple %}
            "type": "select",
            "multiple": true
           {% else %}
            "type": "array",
            "typeField": "{%= col.InputTypeForJSON()%}",
            "action": "add-field",
           "list": [
                     {% for i, val := range values %}
                       {% if i > 0 %} , {% endif %}
                            {% if val != nil %}
                               {
                                 "value": "{%v val %}"
                               }
                            {% endif %}
                     {% endfor %}
                     ]
         {% endif %}
        {% else %}
            "type": "{%= col.InputTypeForJSON()%}"
           {% switch len(values) %}
            {% case 0 %}
            {% case 1 %}
                {% if values[0] != nil %}
                    , "value": {%= json.Element(values[0]) %}
                {% endif %}
            {% default %}
            , "value": {%= json.Slice(values) %}
            {% endswitch %}

         {% endif %}
        {% if col.CharacterMaximumLength() > 0 %}
        , "maxLength": {%d col.CharacterMaximumLength() %}
        {% endif %}
        {%= col.DataForJSON()%}
       , "title": "{%s= col.Label %}"

        {% if len(col.Attachments) > 0 %}
         , "list": {%= json.Element(col.Attachments) %}
        {% endif %}

        {% if col.IsReadOnly %}
         , "readOnly": true
        {% endif %}
        {% if col.IsDisabled %}
         , "disabled": true
        {% endif %}
        {% if col.IsHidden %}
         , "hidden": true
        {% endif %}
}
{% endfunc %}

{% func (col *ColumnDecor) DataForJSON() %}
    {% if col.SelectOptions != nil %}
        , "data": [
        {%code
            sortList := make([]string, 0, len(col.SelectOptions))
            for title := range col.SelectOptions {
                sortList = append(sortList, title)
            }
            sort.Strings(sortList)
        %}
        {% for i, title := range sortList %}
             {% if i > 0 %},{% endif %}
            {
                    "title": "{%s title %}",
                    "label": "{%s title %}",
                    "value": "{%s col.SelectOptions[title].Value %}",
                    {%- if col.SelectOptions[title].Disabled -%} "disabled": true {%- endif -%}
                    {%- if col.SelectOptions[title].Selected -%} "selected": true {%- endif -%}
            }
        {% endfor %}
         {% if col.SelectWithNew %}
         ,
                 {
                    "title": "add new item",
                    "label": "add new item",
                    "value": "new"
                  }
        {% endif %}
       ]
    {% endif %}
{% endfunc %}

{% func (col *ColumnDecor) InputTypeForJSON() %}
	{% switch %}
	{% case col.InputType == "checkbox" %}
		switch
	{% case col.InputType == "textarea" %}
		textarea
	{% case  col.SelectOptions != nil || col.Suggestions > "" %}
		select
    {% default %}
      {%s= col.InputType %}
    {% endswitch %}
{% endfunc %}

{%- func (col *ColumnDecor) RenderValue(value any)  -%}
    {%- switch vv := value.(type) -%}
      {%- case string -%}{%s= strings.ReplaceAll( vv, "\r\n", `
      `) %}
      {%- default -%}{%= json.Element(value) %}
    {%- endswitch -%}
{%- endfunc -%}
{% endstripspace %}

{% func (col *ColumnDecor) RenderAttr(i int)  %}
name="{%s col.InputName(i) %}"
         {% if col.Required() %} required="true" {% endif %}
         {% if col.IsReadOnly %} readonly disabled {% endif %}
         {%- if col.CharacterMaximumLength() > 0 -%}maxlength="{%d col.CharacterMaximumLength() %}"{%- endif -%}
         {% if col.Max > "" %}max="{%s col.Max %}"{%- endif -%}
         {% if col.Min > "" %}min="{%s col.Min %}"{%- endif -%}
         {% if col.PlaceHolder > "" %} placeholder="{%s col.PlaceHolder %}" {% endif %}
         {% if p := col.Suggestions; p > "" %}
         {% elseif col.Pattern() > "" %}
                pattern="{%s= col.Pattern() %}"  onkeyup="return validatePattern(this);"
         {% endif %}

{% endfunc %}

{% func (col *ColumnDecor) RenderInputs(data map[string]any)  %}
 {% if col.IsSlice %}
        {%s col.Label %}
    <ul class="form-field">
 {% endif %}

 {% for i, val := range col.GetValues() %}
  {% if col.IsSlice %}
     <li class="form-field">
  {% endif %}

	{% switch %}
   	{% case  col.IsReadOnly %}
   	     {%s col.Label %}: {%= col.RenderValue(val) %}
   	{% case  col.SelectOptions != nil %}
        {%- if !col.IsSlice -%}{%s col.Label %} {%- endif -%}
            <select {%= col.RenderAttr(i) %}
                    {% if d, ok := data[ col.InputName(i) ].(map[string]any); ok %}
                    {% comment %} mest have '' for internal presentation strings with "" {% endcomment %}
                      data-show-blocks='{%= json.Element(d) %}'
                      onchange="ShowBlocks(this);"
                    {% endif %}
             >
             {%code
                 sortList := make([]string, 0, len(col.SelectOptions))
                 for title := range col.SelectOptions {
                     sortList = append(sortList, title)
                 }
                 sort.Strings(sortList)
             %}
             {% for _, title := range sortList %}
                <option value="{%s col.SelectOptions[title].Value %}"
                {% if fmt.Sprintf("%v", val) == col.SelectOptions[title].Value || col.SelectOptions[title].Selected %} selected {% endif %}
                {% if col.SelectOptions[title].Disabled %} disabled {% endif %}
                >{%s title %}</option>
             {% endfor %}
          </select>
 	{% case col.InputType == "textarea" %}
          <textarea {%= col.RenderAttr(i) %} >{% if val != nil %}{%= col.RenderValue(val) %}{% endif %}</textarea>
        {%- if !col.IsSlice -%}
            <span {% if val != nil || col.PlaceHolder > "" %}class="label-text"{% endif %} data-placeholder="{%s col.Label %}"></span>
        {%- endif -%}
  	{% case col.InputType == "file" %}
        {%- if !col.IsSlice -%}{%s col.Label %} {%- endif -%}
        <span class="hiddenInput" style="background-image: url('{%v val %}');">
            <input {%= col.RenderAttr(i) %} type="file" accept="image">
        </span>
    {% case col.Suggestions > "" %}
        <input type="text" src="{%j= col.Suggestions %}" data="{%s col.InputName(i) %}-sel"
                autocapitalize="none" autocorrect="off" autocomplete="off"
                {% if val != nil %} value ="{%= col.RenderValue(val) %}" {% endif %}
                onkeyup="return inputSearchKeyUp(this,event);" />
        {%- if !col.IsSlice -%}
            <span {% if val != nil || col.PlaceHolder > "" %}class="label-text"{% endif %} data-placeholder="{%s col.Label %}"></span>
        {%- endif -%}
        <div class="suggestions-wrapper" style="width:100%">
            <span class="suggestions-addon" data-addon-type="spinner" style="left: -97px; top: 1px; height: 42px; width: 80%;"></span>
	        <select size="10" {%= col.RenderAttr(i) %}
	            class="suggestions-constraints suggestions-select-hide {%s col.InputName(i) %}-sel"
	            style="width:98%"
	            data-placeholder="{%s col.Label %}">
	        </select>
             <div class="suggestions-suggestions" style="position: absolute; display: none; left: -311.109375px; top: 43px; width: 256.109375px;">
             </div>
         </div>
    {% default %}

               <input type="{%s col.InputType %}" {%= col.RenderAttr(i) %}
                {% if val != nil %} value="{%= col.RenderValue(val) %}" {% endif %}
                {% if col.PlaceHolder > "" %} placeholder="{%s col.PlaceHolder %}" {% endif %}
                {% if col.BasicType() == types.Bool %}
	                onclick="this.value = this.checked;"
	                {% if val == true %}checked{% endif %}
                {% endif %}
               >
        {%- if !col.IsSlice -%}
            <span {% if val != nil || col.PlaceHolder > "" %}class="label-text"{% endif %} data-placeholder="{%s col.Label %}"></span>
        {%- endif -%}
    {% endswitch %}
 {% if col.IsSlice %}
     <button class="removeField" type="button" onclick="this.parentNode.remove(); return false;">-</button>
    </li>
 {% endif %}

 {% endfor %}
 {% if col.IsSlice %}
       </ul>
      <button class="main-btn" type="button"
            onclick="l = this.parentNode.firstElementChild.lastElementChild; l.parentNode.insertBefore(l.cloneNode(true), l); return false;">
            Add new one
        </button>
{% endif %}
{% endfunc %}
{% endcollapsespace %}
