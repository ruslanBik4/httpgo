{% import (
	"fmt"
	"slices"

	"github.com/iancoleman/strcase"
)
%}

{%- func (f * FormField) Create(repo, packageName, unitName string) -%}
// Code generated by httpgo-gen-go. DO NOT EDIT.

package {%s packageName %}

import (
    "go/types"

	"github.com/ruslanBik4/httpgo/apis/crud"
    "github.com/ruslanBik4/httpgo/views/templates/forms"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/httpgo/apis"
	"github.com/ruslanBik4/httpgo/views"

	"github.com/valyala/fasthttp"
	 "{%s repo %}/api"
	 "{%s repo %}/db"
)

{%- code
	blocks := f.Blocks[0].Columns
	for _, block := range f.Blocks[1:] {
		for _, col := range block.Columns {
			if !slices.Contains(blocks, col) {
				blocks = append(blocks, col)
			}
		}
	}
-%}
// {%s strcase.ToCamel(unitName) %} params on routes for CRUD table '
var (
	{%s strcase.ToCamel(unitName) %}GetParams = append(crud.APIQueriesParams,
    {%- for _, col := range blocks -%}
        apis.InParam{
        {%- if col.Column != nil -%}
            Name: "{%s= col.Name() %}",
            {%- if col.Value != nil && col.Value != "nil" -%}
            DefValue: `{%v col.Value %}`,
            {%- endif -%}
            Type: apis.NewTypeInParam({%- if col.InputType == "number" -%}types.Int32{% else %}types.String{% endif %}),
        {%- endif -%}
        },
    {%- endfor -%}
   )
)

var ShowForm{%s strcase.ToCamel(unitName) %}Route = &apis.ApiRoute{
            Desc:   "# show form *{%s f.Title %} {%s f.Description %} ",
            Fnc: HandleShowForms{%s strcase.ToCamel(unitName) %},
            Method: apis.GET,
            IsAJAXRequest: true,
			Params: {%s strcase.ToCamel(unitName) %}GetParams,
    }
// HandleShowForms is handle for show form '{%s strcase.ToCamel(unitName) %}'
func HandleShowForms{%s strcase.ToCamel(unitName) %}(ctx *fasthttp.RequestCtx) (any, error) {
    DB, ok := ctx.UserValue(apis.Database).(*db.Database)
    if !ok {
        logs.ErrorLog(dbEngine.ErrDBNotFound)
        return nil, dbEngine.ErrDBNotFound
    }

    patternList, _ := DB.NewPatternsList(ctx)
	views.WriteHeadersHTML(ctx)

	return RenderForm{%s strcase.ToCamel(unitName) %}(ctx, patternList)
}

func RenderForm{%s strcase.ToCamel(unitName) %}(ctx *fasthttp.RequestCtx, patternList dbEngine.Table) (any, error) {

	f := forms.FormField {
        	Action: "{%s f.Action %}",
        	Classes: "{%s f.Classes %}",
        	Method: "{%s f.Method %}",
        	Description: api.Translate(ctx, "{%s= f.Description %}"),
        	{%- if f.HideBlock != nil -%}
        	HideBlock: {%s= fmt.Sprintf("%#v", f.HideBlock)  %},
        	{%- endif -%}
            {%- if f.Title > "" -%}
        	Title: api.Translate(ctx, "{%s= f.Title %}"),
        	{%- endif -%}
        	Blocks: []forms.BlockColumns{
                {%- for _, block := range f.Blocks -%}
                {
                   Id: {%d block.Id %},
                   Title: api.Translate(ctx, "{%s= block.Title %}"),
                   Description: api.Translate(ctx, "{%s= block.Description %}"),
                   {%- if block.Classes > "" -%}
                   Classes: "{%s block.Classes %}",
                   {%- endif -%}
                   {%- if block.Multiple -%}
                   Multiple: true,
                   {%- endif -%}
                   {%- if len(block.Columns) > 0 -%}
                   Columns: []*forms.ColumnDecor{
                        {%- for _, col := range block.Columns -%}
                        {
                            {%- if col.Column != nil -%}
                            Column: dbEngine.NewStringColumn("{%s= col.Name() %}", api.Translate(ctx, "{%s= col.Comment() %}"), {%v col.Required() %}),
                            Value: ctx.UserValue("{%s= col.Name() %}"),
                            {%- endif -%}
                            {%- if len(col.Events) > 0 -%}
                            Events:  map[string]string{
							         {%- for key, event := range col.Events -%}
							         "{%s key %}": `{%s= event %}`,
							         {%- endfor -%}
							       },
                            {%- endif -%}
                            {%- if col.Accept > "" -%}
                            Accept: "{%s col.Accept %}",
                            {%- endif -%}
                            {%- if col.IsHidden -%}
                            IsHidden: {%v col.IsHidden %},
                            {%- endif -%}
                            {%- if col.IsDisabled -%}
                            IsDisabled: {%v col.IsDisabled %},
                            {%- endif -%}
                            {%- if col.IsReadOnly -%}
                            IsReadOnly: {%v col.IsReadOnly %},
                            {%- endif -%}
                            {%- if col.IsSlice -%}
                            IsSlice: {%v col.IsSlice %},
                            {%- endif -%}
                            {%- if col.IsNewPrimary -%}
                            IsNewPrimary: {%v col.IsNewPrimary %},
                            {%- endif -%}
                            {%- if col.SelectWithNew -%}
                            SelectWithNew: {%v col.SelectWithNew %},
                            {%- endif -%}
                            {%- if col.ExtProperties != nil -%}
                            ExtProperties: {%s= fmt.Sprintf("%+#v", col.ExtProperties) %},
                            {%- endif -%}
                            InputType: "{%s= col.InputType %}",
                            {%- if col.SpecialInputName > "" -%}
                            SpecialInputName: "{%s= col.SpecialInputName %}",
                            {%- endif -%}
                            {%- if col.DefaultInputValue > "" -%}
                            DefaultInputValue: "{%s= col.DefaultInputValue %}",
                            {%- endif -%}
                            {%- if len(col.Attachments) > 0 -%}
                            Attachments: {%s= fmt.Sprintf("%+#v", col.Attachments) %},
                            {%- endif -%}
                            PatternList: patternList,
                            {%- if col.SelectOptions != nil && len(col.SelectOptions) > 0 -%}
                            SelectOptions: {%s= fmt.Sprintf("%+#v", col.SelectOptions) %},
                            {%- endif -%}
                            {%- if col.PatternName  > "" -%}
                            PatternName: `{%s= col.PatternName %}`,
                            {%- endif -%}
                            {%- if col.PlaceHolder  > "" -%}
                            PlaceHolder: "{%s= col.PlaceHolder %}",
                            {%- endif -%}
                            {%- if col.LinkNew  > "" -%}
                            LinkNew: "{%s= col.LinkNew %}",
                            {%- endif -%}
                            Label: api.Translate(ctx, "{%s= col.Label %}"),
                            {%- if col.Suggestions > "" -%}
                            Suggestions: `{%v col.Suggestions %}`,
                            {%- endif -%}
                            {%- if col.SuggestionsParams != nil && len(col.SuggestionsParams) > 0 -%}
                            SuggestionsParams: {%s= fmt.Sprintf("%+#v", col.SuggestionsParams) %},
                            {%- endif -%}
                        },
                        {%- endfor -%}
                        },
                    {%- endif -%}
                    {%- if len(block.Buttons) > 0 -%}
                    Buttons:[]forms.Button{
                        {%- for _, btn := range block.Buttons -%}
                            forms.Button{
                                Id: "{%s btn.Id %}",
                                {%- if btn.Classes > "" -%}
	                            Classes:      api.Translate(ctx, `{%s= btn.Classes %}`),
	                            {%- endif -%}
                                {%- if btn.Hidden -%}
	                            Hidden: true,
	                            {%- endif -%}
                                {%- if btn.Position -%}
	                            Position: true,
	                            {%- endif -%}
                                {%- if btn.Title > "" -%}
	                            Title:      api.Translate(ctx, `{%s= btn.Title %}`),
	                            {%- endif -%}
                                {%- if btn.Type > "" -%}
	                            Type:       "{%s= btn.Type %}",
	                            {%- endif -%}
                                {%- if btn.OnClick > "" -%}
	                            OnClick:    `{%s= btn.OnClick %}`,
	                            {%- endif -%}
                            },
                        {%- endfor -%}
                    },
                    {%- endif -%}
                },
                {%- endfor -%}
            },
        }

	f.WriteRenderForm( ctx.Response.BodyWriter(), true)

    return nil, nil
}
{% endfunc %}