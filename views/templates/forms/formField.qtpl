{% import (
	"fmt"
	"github.com/iancoleman/strcase"
)
%}

{%- func (f * FormField) Create(packageName, unitName string) -%}
// Code generated by httpgo-gen-go. DO NOT EDIT.

package {%s packageName %}

import (
    "github.com/ruslanBik4/httpgo/views/templates/forms"
	"github.com/ruslanBik4/dbEngine/dbEngine"
    "github.com/ruslanBik4/logs"

	"github.com/valyala/fasthttp"
)
var f{%s strcase.ToCamel(unitName) %} = forms.FormField {
        	Title: "{%s f.Title %}",
        	Action: "{%s f.Action %}",
        	Method: "{%s f.Method %}",
        	Description: "{%s f.Description %}",
        	{%- if f.HideBlock != nil -%}
        	HideBlock: {%s= fmt.Sprintf("%#v", f.HideBlock)  %},
        	{%- endif -%}
        	Blocks: []forms.BlockColumns{
                {%- for _, block := range f.Blocks -%}
                {
                   Id: {%d block.Id %},
                   Title: "{%s= block.Title %}",
                   Description: "{%s= block.Description %}",
                   Multiple: {%v block.Multiple %},
                   {%- if len(block.Columns) > 0 -%}
                   Columns: []*forms.ColumnDecor{
                        {%- for _, col := range block.Columns -%}
                        {
                            {%- if col.Column != nil -%}
                            Column: dbEngine.NewStringColumn("{%s= col.Name() %}", "{%s= col.Comment() %}", {%v col.Required() %}),
                            {%- endif -%}
                            {%- if col.IsHidden-%}
                            IsHidden: {%v col.IsHidden %},
                            {%- endif -%}
                            {%- if col.IsDisabled -%}
                            IsDisabled: {%v col.IsDisabled %},
                            {%- endif -%}
                            {%- if col.IsReadOnly -%}
                            IsReadOnly: {%v col.IsReadOnly %},
                            {%- endif -%}
                            {%- if col.IsSlice -%}
                            IsSlice: {%v col.IsSlice %},
                            {%- endif -%}
                            {%- if col.IsNewPrimary -%}
                            IsNewPrimary: {%v col.IsNewPrimary %},
                            {%- endif -%}
                            {%- if col.SelectWithNew-%}
                            SelectWithNew: {%v col.SelectWithNew %},
                            {%- endif -%}
                            {%- if col.ExtProperties != nil -%}
                            ExtProperties: {%s= fmt.Sprintf("%+#v", col.ExtProperties) %},
                            {%- endif -%}
                            InputType: "{%s= col.InputType %}",
                            SpecialInputName: "{%s= col.SpecialInputName %}",
                            DefaultInputValue: "{%s= col.DefaultInputValue %}",
                            {%- if len(col.Attachments) > 0 -%}
                            Attachments: {%s= fmt.Sprintf("%+#v", col.Attachments) %},
                            {%- endif -%}
                            {%- if col.SelectOptions != nil && len(col.SelectOptions) > 0 -%}
                            SelectOptions: {%s= fmt.Sprintf("%+#v", col.SelectOptions) %},
                            {%- endif -%}
                            {%- if col.PatternName  > "" -%}
                            PatternName: `{%s= col.PatternName %}`,
                            {%- endif -%}
                            {%- if col.PlaceHolder  > "" -%}
                            PlaceHolder: "{%s= col.PlaceHolder %}",
                            {%- endif -%}
                            {%- if col.LinkNew  > "" -%}
                            LinkNew: "{%s= col.LinkNew %}",
                            {%- endif -%}
                            Label: "{%s= col.Label %}",
                            {%- if col.Value != nil && col.Value != "nil" -%}
                            Value: `{%v col.Value %}`,
                            {%- endif -%}
                            {%- if col.Suggestions > "" -%}
                            Suggestions: `{%v col.Suggestions %}`,
                            {%- endif -%}
                            {%- if col.SuggestionsParams != nil && len(col.SuggestionsParams) > 0 -%}
                            SuggestionsParams: {%s= fmt.Sprintf("%+#v", col.SuggestionsParams) %},
                            {%- endif -%}
                        },
                        {%- endfor -%}
                        },
                    {%- endif -%}
                    {%- if len(block.Buttons) > 0 -%}
                    Buttons:[]forms.Button{
                        {% for _, btn := range block.Buttons %}
                            {%s= fmt.Sprintf("%#v", btn)  %},
                        {% endfor %}
                    },
                    {%- endif -%}
                },
                {%- endfor -%}
            },
        }

func RenderForm{%s strcase.ToCamel(unitName) %}(ctx *fasthttp.RequestCtx, patternList dbEngine.Table) (any, error) {
	f := f{%s strcase.ToCamel(unitName) %}
    if patternList != nil {
        for _, block := range f.Blocks {
            for _, col := range block.Columns {
                col.PatternList = patternList
                if p := col.Pattern(); p > "" {
                    logs.DebugLog("set pattern:", p)
                }
            }
        }
    }
	f.WriteRenderForm( ctx.Response.BodyWriter(), true)

    return nil, nil
}
{% endfunc %}