All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

{% import (
    "fmt"
    "strconv"
	"sort"
	"strings"
	"github.com/ruslanBik4/httpgo/views/templates/json"
)
%}
{% code
    type FormField struct {
        Title, Action, Method, Description string
        HideBlock interface{}
    }
%}
{% collapsespace %}
{% stripspace %}
json for front forms https://storybook.pm-db.net/?path=/story/form-types--page
{% func (f *FormField) RenderForm(isHTML bool, blocks ... BlockColumns) %}
        {% if isHTML %}
            {%= f.FormHTML(blocks ...) %}
        {% else %}
             {%= f.FormJSON(blocks ...) %}
       {% endif %}
{% endfunc %}

{% func (f *FormField) FormJSON(blocks ... BlockColumns) %}
  {
    "title" : "{%s= f.Title %}",
    "action": "{%s= f.Action %}",
    "description": "{%s= f.Description %}",
    {% if f.HideBlock != nil %} "hideBlock": {%= json.Element( f.HideBlock ) %},{% endif %}
    "method": "{%s= f.Method %}",
    "blocks": [
        {% for i, block := range blocks %}
        {% if i > 0 %}
            ,
        {% endif %}
        {
           "id": "{%d block.Id %}",
           "title": "{%s= block.Title %}",
           "description": "{%s= block.Description %}",
           "fields": [
                {% for j, col := range block.Columns %}
                    {% if j > 0 %}
                        ,
                    {% endif %}
                    {%= col.ToJSON() %}
                {% endfor %}
                ],
                "actions": [
                      {
                        "groups": [
                         {% for i, button := range block.Buttons %}
                            {% if i > 0 %}
                                ,
                            {% endif %}
                         {
                             "buttonType":  "{%s= button.ButtonType %}",
                             "title": "{%s= button.Title %}",
                             "type": "{%s= button.ButtonType %}"
                         }
                         {% endfor %}
                         ]
                      }
                ]
       }
    {% endfor %}
   ]
  }
{% endfunc %}


{% func (col *ColumnDecor) ToJSON() %}
{
        {% code
            values := col.GetValues()
        %}

        "name": "{%s= col.InputName(-1) %}",
        "required": {%v col.Required() %},
         {% if col.patternDesc > "" %}
             "error": {
                "pattern": "{%s= col.patternDesc %}",
                "message": "{%s= col.patternDesc %}"
             },
         {% endif %}

        {% if p := col.Suggestions; p > "" %}
          "suggestions":{
                "url":"{%j= p %}"
                 {% for name, val := range col.SuggestionsParams %}
                   , "{%j= name %}": {%= json.Element(val)%}
                 {% endfor %}
          },
            {% if d := col.DefaultInputValue; d > "" %}
                "defaultInputValue": "{%j= d %}",
            {% endif %}
        {% elseif p := col.Pattern(); p > "" %}
          "pattern":"{%j= p %}",
        {% endif %}

         {% if col.IsSlice %}
           {% if col.multiple %}
            "type": "select",
            "multiple": true
           {% else %}
            "type": "array",
            "typeField": "{%= col.InputTypeForJSON()%}",
            "action": "add-field",
           "list": [
                     {% for i, val := range values %}
                       {% if i > 0 %} , {% endif %}
                            {% if val != nil %}
                               {
                                 "value": "{%v val %}"
                               }
                            {% endif %}
                     {% endfor %}
                     ]
         {% endif %}
        {% else %}
            "type": "{%= col.InputTypeForJSON()%}"
           {% switch len(values) %}
            {% case 0 %}
            {% case 1 %}
                {% if values[0] != nil %}
                    , "value": {%= json.Element(values[0]) %}
                {% endif %}
            {% default %}
            , "value": {%= json.Slice(values) %}
            {% endswitch %}

         {% endif %}
        {% if col.CharacterMaximumLength() > 0 %}
        , "maxLength": {%d col.CharacterMaximumLength() %}
        {% endif %}
        {%= col.DataForJSON()%}
       , "title": "{%s= col.Label %}"

        {% if len(col.Attachments) > 0 %}
         , "list": {%= json.Element(col.Attachments) %}
        {% endif %}

        {% if col.IsReadOnly %}
         , "readOnly": true
        {% endif %}
        {% if col.IsDisabled %}
         , "disabled": true
        {% endif %}
        {% if col.IsHidden %}
         , "hidden": true
        {% endif %}
}
{% endfunc %}

{% func (col *ColumnDecor) DataForJSON() %}
    {% if col.SelectOptions != nil %}
        , "data": [
        {%code
            sortList := make([]string, 0, len(col.SelectOptions))
            for title := range col.SelectOptions {
                sortList = append(sortList, title)
            }
            sort.Strings(sortList)
        %}
        {% for i, title := range sortList %}
             {% if i > 0 %},{% endif %}
            {
                    "title": "{%s title %}",
                    "label": "{%s title %}",
                    "value": "{%s col.SelectOptions[title] %}"
            }
        {% endfor %}
         {% if col.SelectWithNew %}
         ,
                 {
                    "title": "add new item",
                    "label": "add new item",
                    "value": "new"
                  }
        {% endif %}
       ]
    {% endif %}
{% endfunc %}

{% func (col *ColumnDecor) InputTypeForJSON() %}
	{% switch %}
	{% case col.InputType == "checkbox" %}
		switch
	{% case col.InputType == "textarea" %}
		textarea
	{% case  col.SelectOptions != nil || col.Suggestions > "" %}
		select
    {% default %}
      {%s= col.InputType %}
    {% endswitch %}
{% endfunc %}

{% func (col *ColumnDecor) RenderValue(value interface{})  %}
    {% switch vv := value.(type) %}
      {% case string %} {%s= strings.ReplaceAll( vv, "\r\n", `
      `) %}
      {% default %}
            {%= json.Element(value) %}
      {% endswitch %}
{% endfunc %}

{% endstripspace %}

{% func (col *ColumnDecor) RenderAttr(i int)  %}
name="{%s col.InputName(i) %}"
         {% if col.Required() %} required="true" {% endif %}
         {% if col.IsReadOnly %} readonly disabled {% endif %}
         {% if col.CharacterMaximumLength() > 0 %}  max = "{%d col.CharacterMaximumLength() %}" {% endif %}
         {% if col.Placeholder() > "" %} placeholder="{%s col.Placeholder() %}" {% endif %}
         {% if p := col.Suggestions; p > "" %}
         {% elseif col.Pattern() > "" %}
                pattern="{%s= col.Pattern() %}"  onkeyup="return validatePattern(this);"
         {% endif %}

{% endfunc %}

{% func (col *ColumnDecor) RenderInputs(data map[string]interface {})  %}
 {% if col.IsSlice %}
    <ul class="form-field">
 {% endif %}
 {% for i, val := range col.GetValues() %}
  {% if col.IsSlice %}
     <li class="form-field">
  {% endif %}

	{% switch %}
   	{% case  col.SelectOptions != nil %}
            <select {%= col.RenderAttr(i) %}
                    {% if d, ok := data[ col.InputName(i) ].(map[string]interface {}); ok %}
                      data-show-blocks='{%= json.Element(d) %}'
                      onchange="ShowBlocks(this);"
                    {% endif %}
             >
             {%code
                 sortList := make([]string, 0, len(col.SelectOptions))
                 for title := range col.SelectOptions {
                     sortList = append(sortList, title)
                 }
                 sort.Strings(sortList)
             %}
             {% for _, title := range sortList %}
                <option value="{%s col.SelectOptions[title] %}"
                {% if fmt.Sprintf("%v", val) == col.SelectOptions[title] %} selected {% endif %}
                >{%s title %}</option>
             {% endfor %}
          </select>
 	{% case col.InputType == "textarea" %}
          <textarea {%= col.RenderAttr(i) %} >{% if val != nil %}{%= col.RenderValue(val) %}{% endif %}</textarea>
  	{% case col.InputType == "file" %}
        <span class="hiddenInput"
            style="background-image: url('{%v val %}');">
            <input {%= col.RenderAttr(i) %} type="file" accept="image">
        </span>
    {% case col.Suggestions > "" %}
        <input type="text" src="{%j= col.Suggestions %}" data="{%s col.InputName(i) %}-sel"
                autocapitalize="none" autocorrect="off" autocomplete="off"
                {% if val != nil %} value = '{%= col.RenderValue(val) %}' {% endif %}
                onkeyup="inputSearchKeyUp(this,event);" />
        <select {%= col.RenderAttr(i) %} size=10 class="suggestions-select-hide {%s col.InputName(i) %}-sel" style="left: -399.109375px; top: 50px;">
        </select>
    {% default %}
               <input type="{%s col.InputType %}" {%= col.RenderAttr(i) %}
                {% if val != nil %} value = '{%= col.RenderValue(val) %}' {% endif %}
               >
    {% endswitch %}
 {% if col.IsSlice %}
         <button class="removeField" type="button"
             onclick="this.parentNode.remove(); return false;">-</button>
    </li>
 {% endif %}

 {% endfor %}
 {% if col.IsSlice %}
     <li class="form-field">
        <button class="main-btn" type="button"
            onclick="l = this.parentNode; l.parentNode.insertBefore(l.previousElementSibling.cloneNode(true), l); return false;">+</button>
    </li>
    </ul>
 {% endif %}
{% endfunc %}

{% func (f *FormField) FormHTML(blocks ... BlockColumns) %}
<style>
figure {
    border: thin #c0c0c0 solid;
    display: flex;
    flex-flow: column;
    padding: 5px;
    max-width: 80%;
    margin: auto;
}
figcaption {
    background-color: #222;
    color: #fff;
    font: italic smaller sans-serif;
    padding: 3px;
    text-align: center;
}
.input-label{
    position: relative;
}
li.form-field{
    position: relative;
    margin: 0 10px;
    display: flex;
    flex-wrap: wrap;
    padding: 12px 0;
    box-sizing: border-box;
}
ul.form-field{
    position: relative;
    margin: 0 -10px;
    list-style: none;
    background-color: white;
}
.removeField {
    position: absolute;
    top: 4px;
    right: -8px;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #ffa30c;
    z-index: 1;
    transition: all .3s ease-in-out;
}
</style>
{% code
  idShake := strings.ReplaceAll(f.Title, " ", "_")
  defBlocks := make([]string, 0)
  var data map[string]interface {}
  if h, ok := f.HideBlock.(map[string]interface{}); ok {
    for _, p := range h["defaultBlocks"].([]interface {}) {
        defBlocks = append(defBlocks, p.(string))
    }
    data = h["data"].(map[string]interface {})
  }
%}
<form id="{%s idShake %}form" name="{%s f.Title %}" role='form' class="form-horizontal" target="content"
         action="{%s f.Action %}" method="{%s= f.Method %}" enctype="multipart/form-data"
         oninput="d = document.querySelector('button.hidden', this); if (d) {d.className = 'main-btn'};"
         onchange="d = document.querySelector('button.hidden', this); if (d) {d.className = 'main-btn'};"
      onsubmit="return saveForm(this, afterSaveAnyForm);"  caption="{%s f.Title %}" >

         <figcaption>{%s= f.Description %}</figcaption>
        {% for _, block := range blocks %}
           {% code
                isHide := (len(defBlocks) > 0)
                for _, id := range defBlocks {
                      if id == strconv.Itoa(block.Id) {
                         isHide = false
                         break
                      }
                }
           %}
            <figure id = "block{%d block.Id %}" {% if isHide %} style="display:none"{% endif %} >
            {% if block.Title > "" %} <figcaption>{%s block.Title %}</figcaption>{% endif %}
            {% if block.Description > "" %} <p>{%s block.Description %} </p> {% endif %}
                {% for i, col := range block.Columns %}
                  <div id="divField{%d i %}" class="input-wrap"
                  {% if col.IsHidden %} style="display:none" {% endif %} >
                    <label class="input-label" for="{%s col.Name() %}">{%s col.Label %}
                    {%= col.RenderInputs(data) %}
                    <h6 class="errorLabel">{%s= col.patternDesc %}</h6>
                    </label>
                  </div>
                {% endfor %}
        </figure>
  {% if block.Multiple %}
         <button class="main-btn" type="button"
         onclick="this.parentNode.insertBefore(this.previousElementSibling.cloneNode(true), this); return false;">+</button>

  {% endif %}

    <div class="form-actions">
      {% for _, btn := range block.Buttons %}
        <button class="{% if btn.Position %} hidden {% else %} button {% endif %}" type="{%s= btn.ButtonType %}">{%s btn.Title %}</button>
      {% endfor %}
    </div>
  {% endfor %}
</form>
<style>
.errorLabel {
    display: none;
    color:red;
}
.input-label {
    width: 98%;
    align-content: center;
}
.hiddenInput > input[type=file] {
    width: 100%;
    height: 100%;
    opacity: 0;
    cursor: pointer;
}
form > span.hiddenInput:hover{
  position: fixed;
    top: 1%;
    right: 1%;
    width: 25%;
    max-height: 75%;
}

.hiddenInput {
    border: 1px solid #ccc;
    width: 100%;
    height: 100%;
    min-height: 50px;
    display: inline-block;
    overflow: hidden;
    cursor: pointer;
    background: center center no-repeat scroll;
    background-size: contain;
}
.suggestions-select-hide {
  opacity: 0;
  height: 0.1px !important;
  position: absolute;
  left: -400px;
}

.suggestions-select-show {
  opacity: 1;
  height: 200px !important;
  position: static;
}

</style>
<script>
{% endcollapsespace %}
function validatePattern(thisElem) {
    var re = thisElem.pattern,
        result = true;

    if (re == "") {
        return true;
    }

    try {

        re = new RegExp(re);
        result = re.test(thisElem.value);
        if(result){
            thisElem.style.borderColor = 'green';
            thisElem.nextElementSibling.style.display = 'none';
        } else {
            thisElem.style.borderColor = 'red';
            thisElem.nextElementSibling.style.display = 'block';
       }

    } catch (e) {
        console.log(e)
    }

    return result;
}
function inputSearchKeyUp(thisElem, event){

        var x = event.which || event.keyCode;
        var elem = $(thisElem)
        var thisClass = 'select.suggestions-select-show.'+thisElem.attributes.data.value
        var thisClassH = 'select.suggestions-select-hide.'+thisElem.attributes.data.value

            if (x == 40) {
                elem.unbind("blur");
                $(thisClass).focus();
                $(thisClass + ' option:first').selected();

               return;
            }

             elem.on("blur", function(){

                   if (event.relatedTarget && event.relatedTarget.className == "suggestions-select-show") {
                             return;
                   }

                     console.log(event);
                     $(thisClass).removeClass('suggestions-select-show').addClass('suggestions-select-hide');
                 })

             if (elem.val().length < 2) {
                return true;
             }

             $.ajax({
                 url: thisElem.src,
                 data: {
                         "lang": lang,
                         "value": thisElem.value,
                         "count": 10,
                         "html": true
                 },
               beforeSend: function (xhr) {
                   xhr.setRequestHeader('Authorization', 'Bearer ' + token);
               },
               success: function (data, status) {
                 $(thisClassH).html(data).removeClass('suggestions-select-hide').addClass('suggestions-select-show')
                 .on('keyup', function(event) {
                             var x = event.which || event.keyCode;
                             if (x == 32) {
                                     thisElem.value = $(thisClass + ' option:selected').text();
                                     $(thisClass).removeClass('suggestions-select-show').addClass('suggestions-select-hide');

                                     return false;
                              }
                       });
                 $(thisClass + ' option').on('mouseup', function(e) {
                    thisElem.value = $(this).text();
                     $(thisClass).removeClass('suggestions-select-show').addClass('suggestions-select-hide');

                    return true;
                 });

               },
               error: function (xhr, status, error) {
                   alert( "Code : " + xhr.status + " error :"+ error);
                   console.log(error);
               }
              });
}

function ShowBlocks(thisElem){
    d=$(thisElem).data('show-blocks');
    $(thisElem).parents('form').children('figure').hide();
    d[$('option:selected', thisElem).val()].every(function (e) {$('#block'+ e).show(); return true;})
}
</script>
{% endfunc %}
