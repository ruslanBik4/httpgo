All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

{% import (
	"sort"
	"strings"
	"github.com/ruslanBik4/httpgo/views/templates/json"
)
%}
{% code
    type FormField struct {
        Title, Action, Method, Description string
    }
%}
{% collapsespace %}
{% stripspace %}
json for front forms https://storybook.pm-db.net/?path=/story/form-types--page
{% func (f *FormField) RenderForm(isHTML bool, blocks ... BlockColumns) %}
        {% if isHTML %}
            {%= f.FormHTML(blocks ...) %}
        {% else %}
             {%= f.FormJSON(blocks ...) %}
       {% endif %}
{% endfunc %}

{% func (f *FormField) FormJSON(blocks ... BlockColumns) %}
  {
    "title" : "{%s= f.Title %}",
    "action": "{%s= f.Action %}",
    "description": "{%s= f.Description %}",
    "method": "{%s= f.Method %}",
    "blocks": [
        {% for i, block := range blocks %}
        {% if i > 0 %}
            ,
        {% endif %}
        {
           "id": "{%d block.Id %}",
           "title": "{%s= block.Title %}",
           "description": "{%s= block.Description %}",
            "fields": [
                {% for j, col := range block.Columns %}

                    {% if j > 0 %}
                        ,
                    {% endif %}
                    {
                        {% code
                            values := col.GetValues()
                        %}

                        "name": "{%s col.InputName(-1) %}",
                        "required": {%v col.Required() %},
                         {% if col.patternDesc > "" %}
                             "error": {
                                "pattern": "{%s col.patternDesc %}",
                                "message": "{%s col.patternDesc %}"
                             },
                         {% endif %}

                        {% if p := col.Pattern(); p > "" %}
                          "pattern":"{%j p %}",
                        {% endif %}

                         {% if col.IsSlice %}
                            "type": "array",
                            "typeField": "{%= col.InputTypeForJSON()%}",
                            "action": "add-field",
                            "list": [
                             {% for i, val := range values %}
                               {% if i > 0 %} , {% endif %}
                                       {
                                         "value": "{%v val %}"
                                       }
                             {% endfor %}
                             ]
                         {% else %}
                            "type": "{%= col.InputTypeForJSON()%}"
                           {% switch len(values) %}
                            {% case 0 %}
                            {% case 1 %}
                                {% if values[0] != nil %}
                                    , "value": "{%v values[0] %}"
                                {% endif %}
                            {% default %}
                            , "value": {%= json.SimpleDimension(values) %}
                            {% endswitch %}

                         {% endif %}
                        {% if col.CharacterMaximumLength() > 0 %}
                        , "maxLength": {%d col.CharacterMaximumLength() %}
                        {% endif %}
                        {%= col.DataForJSON()%}
                       , "title": "{%s col.Label %}"

                        {% if col.IsReadOnly %}
                         , "readonly": true
                        {% endif %}
                   }
                {% endfor %}
                ],
                "actions": [
                      {
                        "groups": [
                         {% for i, button := range block.Buttons %}
                            {% if i > 0 %}
                                ,
                            {% endif %}
                         {
                             "buttonType":  "{%s button.ButtonType %}",
                             "title": "{%s button.Title %}",
                             "type": "button"
                         }
                         {% endfor %}
                         ]
                      }
                ]
       }
    {% endfor %}
   ]
  }
{% endfunc %}


{% func (col *ColumnDecor) DataForJSON() %}
    {% if col.SelectOptions != nil %}
        , "data": [
        {%code
            sortList := make([]string, 0, len(col.SelectOptions))
            for title := range col.SelectOptions {
                sortList = append(sortList, title)
            }
            sort.Strings(sortList)
        %}
        {% for _, title := range sortList %}
         {
                    "title": "{%s title %}",
                    "label": "{%s title %}",
                    "value": "{%s col.SelectOptions[title] %}"
         },
        {% endfor %}
                  {
                    "title": "add new item",
                    "label": "add new item",
                    "value": "new"
                  }
        ]
    {% endif %}
{% endfunc %}

{% func (col *ColumnDecor) InputTypeForJSON() %}
	{% switch %}
	{% case col.InputType == "checkbox" %}
		switch
	{% case col.InputType == "textarea" %}
		textarea
	{% case  col.SelectOptions != nil %}
		select
    {% default %}
      {%s= col.InputType %}
    {% endswitch %}
{% endfunc %}
{% endstripspace %}

{% func (col *ColumnDecor) RenderAttr(i int)  %}
name="{%s col.InputName(i) %}"
         {% if col.Required() %} required="true" {% endif %}
                  {% if col.IsReadOnly %} readonly disabled {% endif %}

{% endfunc %}

{% func (col *ColumnDecor) RenderInputs()  %}
 {% for i, val := range col.GetValues() %}
 	{% switch %}
   	{% case  col.SelectOptions != nil %}
            <select {%= col.RenderAttr(i) %} >
             {%code
                 sortList := make([]string, 0, len(col.SelectOptions))
                 for title := range col.SelectOptions {
                     sortList = append(sortList, title)
                 }
                 sort.Strings(sortList)
             %}
             {% for _, title := range sortList %}
                <option value="{%s col.SelectOptions[title] %}" {% if v, ok := val.(string); ok && v == col.SelectOptions[title] %} selected {% endif %} >{%s title %}</option>
             {% endfor %}
          </select>
 	{% case col.InputType == "textarea" %}
                <textarea {%= col.RenderAttr(i) %}
                 {% if col.CharacterMaximumLength() > 0 %}  max = "{%d col.CharacterMaximumLength() %}" {% endif %}
                  {% if col.Pattern() > "" %} pattern="{%s col.Pattern() %}"  onkeyup="return validatePattern(this);" {% endif %}
                  {% if col.Placeholder() > "" %} placeholder="{%s col.Placeholder() %}" {% endif %}
                >
                  {% if val != nil %}{%v val %}{% endif %}
               </textarea>
   {% default %}
               <input type="{%s col.InputType %}" {%= col.RenderAttr(i) %}
                {% if col.CharacterMaximumLength() > 0 %}  max = "{%d col.CharacterMaximumLength() %}" {% endif %}
                {% if val != nil %} value = "{%v val %}" {% endif %}
                 {% if col.Pattern() > "" %} pattern="{%s col.Pattern() %}"  onkeyup="return validatePattern(this);" {% endif %}
                 {% if col.Placeholder() > "" %} placeholder="{%s col.Placeholder() %}" {% endif %}
               >
    {% endswitch %}
 {% endfor %}
 {% if col.IsSlice %}
        <button class="main-btn" type="button"
            onclick="this.parentNode.insertBefore(this.previousElementSibling.cloneNode(), this); return false;">+</button>
        <button class="main-btn" type="button"
            onclick="this.parentNode.insertBefore(this.previousElementSibling.cloneNode(), this); return false;">-</button>

 {% endif %}
{% endfunc %}

{% func (f *FormField) FormHTML(blocks ... BlockColumns) %}
{% code
  idShake := strings.Replace(f.Title, " ", "_", -1)
%}
<form id="{%s idShake %}form" name="{%s f.Title %}" role='form' class="form-horizontal" target="content"
         action="{%s f.Action %}" method="{%s= f.Method %}" enctype="multipart/form-data"
         oninput="document.querySelector('#{%s idShake %}form button.hidden').className = 'main-btn'"
      onsubmit="return saveForm(this, afterSaveAnyForm);"  caption="{%s f.Title %}" >
        {% for _, block := range blocks %}
        <div>
        <h2>{%s block.Title %} </h2>
        <h3>{%s block.Description %} </h3>
                {% for i, col := range block.Columns %}
                  <div id="divField{%d i %}" class="input-wrap"
                  {% if col.IsHidden %} style="display:none" {% endif %} >
                    <label class="input-label" for="{%s col.Name() %}">{%s col.Label %}</label>
                    {%= col.RenderInputs()  %}
                   </div>
                {% endfor %}
        </div>
  {% if block.Multiple %}
         <button class="main-btn" type="button"
         onclick="this.parentNode.insertBefore(this.previousElementSibling.cloneNode(true), this); return false;">+</button>

  {% endif %}
       {% endfor %}

    <div class="form-actions">
        <button class="hidden" type="submit">Сохранить</button>
    </div>
</form>
<script>
{% endcollapsespace %}
function validatePattern(thisElem) {
    var re = thisElem.pattern,
        result = true;

    if (re == "") {
        return true;
    }

    try {

        re = new RegExp(re);
        result = re.test(thisElem.value);
        if(result){
            thisElem.style.borderColor = 'green';
        } else {
            thisElem.style.borderColor = 'red';
        }

    } catch (e) {
        console.log(e)
    }

    return result;
}
</script>
{% endfunc %}
