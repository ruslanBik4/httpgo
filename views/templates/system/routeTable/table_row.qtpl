{% import (
	"regexp"
	"fmt"
	"time"
	"sort"
	"go/types"

	"github.com/ruslanBik4/httpgo/views/templates/json"
	"github.com/ruslanBik4/httpgo/views/templates/forms"
	)
%}
{%code
	var regHTML = regexp.MustCompile(`>([^<]+)<\/`)
%}
{% func TableRow(columns []*forms.ColumnDecor, rows [][] interface{}) %}
<style>
{%= TableCSS() %}
{%code
   colLen := make([]int, len(columns))
   colDeep := make([]int, len(columns))
   lSymb := 11
   allWidth := 0
   for i, col := range columns {
        colLen[i] = len(col.Label)*(lSymb + 1)
        colDeep[i] = 1
   }
%}
</style>
<script>
function getElementsByText(str, name) {
  var items = document.getElementsByClassName(name);
  var elem = Array.prototype.slice.call(items).forEach(
  function(el, ind, arr) {
    if (str.trim() == "") {
        el.parentElement.style = "";
        return true;
    }
    if ( el.textContent.includes( str.trim() ) || el.parentElement.className.includes("usr-table__filter")) {
        el.parentElement.style = "";
        return true;
    }
     el.parentElement.style = "display:none";
    });
    return
  if (elem.length > 0) {
//todo- chg on each
    elem[0].scrollIntoView({block: "center", behavior: "smooth"});
    elem[0].focus();
    elem[0].animate([
      {color: 'blue'},
      {color: 'red'}
    ], {
        duration: 3000,
        iterations: 100
    });
  }
}
</script>
{% collapsespace %}
{% stripspace %}

<div class="usr-table  table-custom">
	<div class="usr-table-header">
	    <div class="usr-table__t-head  usr-table-row">
	    {% for i, col := range columns %}
	        <div class="usr-table-col  table-col-{%d i%}" a={%d i %}>
	            {%s col.Label %}
	        </div>
	    {% endfor %}
	    </div>

	    <div class="usr-table__filter  usr-table-row">
		{% for i, col := range columns %}
		<div class="usr-table-col table-col-{%d i%}">
		<div class="filt-arrow" style="word-break: break-word;">
		{%- if col.LinkNew > "" -%} {%s= col.LinkNew %}
		{% else %}
			{% switch %}
			{% case  col.SelectOptions != nil %}
				<select {%= col.RenderAttr(i) %} onchange="getElementsByText(this.value, 'table-col-{%d i%}');">
				{%code
					sortList := make([]string, 0, len(col.SelectOptions))
					for title := range col.SelectOptions {
					 sortList = append(sortList, title)
					}
					sort.Strings(sortList)
				%}
                <option value="" >All</option>
	             {% for _, title := range sortList %}
	                <option value="{%s title %}" >{%s title %}</option>
	             {% endfor %}
                </select>
			{% case col.InputType == "file" %}
	            <span class="hiddenInput" style="background-image: url('%v val %');"> </span>
			{% case col.Suggestions > "" %}
	            <input type="text" src="{%j= col.Suggestions %}" data="{%s col.InputName(i) %}-sel"
	                autocapitalize="none" autocorrect="off" autocomplete="off"
	                onkeyup="inputSearchKeyUp(this,event);" />
		        <select {%= col.RenderAttr(i) %} size=10 class="suggestions-select-hide {%s col.InputName(i) %}-sel" style="left: -399.109375px; top: 50px;">
		        </select>
			{% default %}
				<input type="{%s col.InputType %}" onchange="getElementsByText(this.value, 'table-col-{%d i%}');"/>
			{% endswitch %}
		{% endif %}
		</div>
		</div>
		{% endfor %}
		</div>
    </div>

    <div class="usr-table-content">
        <div class="usr-table-content-scroll">
            <div class="usr-table-row-cont">

               {% for _, row  := range rows %}

                    <div  class="usr-table-row">

                    {% for i, column := range columns %}
                        <div class="usr-table-col  table-col-{%d i%}">
                            {% switch val := row[i].(type) %}
                            {% case time.Time %}  {%s val.Format("2006-01-02") %} {%- code
                                                    hour, min, sec := val.Clock()
                                                    -%}
                                                    {%- if hour > 0 || min > 0 || sec > 0 -%}<br>
                                                    {%s= fmt.Sprintf("%2.2d:%2.2d:%2.2d", hour, min, sec) %}
                                                    {%- endif -%}
                            {% case string %}
                              {%s= val %}
                              {%code
                                   lenVal := lSymb
                                   s := regHTML.FindString(val)
                                   if len(s) > 0 {
                                    lenVal *= len(s)
                                   } else {
                                    lenVal *= len(val)
                                   }

                                if lenVal > colLen[i] && (column.Name() != "id") {
                                    colLen[i] = lenVal
                                }
                              %}
                            {% case bool %}  {% if val %}X{% endif %}
                            {% case float32 %}   {%v= val %}
                            {% case float64 %}   {%f.2 val %}
                            {% case []string %}

                                  {% for _, str := range val %}
                                   <p>{%s= str %}</p>
                                    {%code
                                      lenVal := lSymb * (len(str) + 2)
                                      if lenVal > colLen[i] {
                                        colLen[i] = lenVal
                                      }
                                    %}
                                    {% endfor %}
                                  {%code
                                    if colDeep[i] < len(val) {
                                        colDeep[i] = len(val)
                                    }
                                  %}

                            {% case []int32 %}
                                  {% for _, val := range val %}
                                    {%v= val %}
                                  {% endfor %}

                            {% case []int64 %}
                                  {% for _, val := range val %}
                                    {%v= val %}
                                  {% endfor %}

                            {% case map[string]string %}
                                <table>
                                      {% code

                                     if colDeep[i] < len(val) {
                                         colDeep[i] = len(val)
                                     }

                                     	sortList := make([]string, 0, len(val))
                                      	for name := range val {
                                      		sortList = append(sortList, name)
                                      	}
                                      	sort.Strings(sortList)
                                      %}
                                      {% for _, key := range sortList %}
                                        <tr><td><b>{%s= key %}</b></td><td>{%s= val[key] %}</td></tr>
                                         {%code
                                           lenVal := (lSymb+2) * len(key) + lSymb * len(val[key]) + 2
                                           if lenVal > colLen[i] {
                                             colLen[i] = lenVal
                                           }
                                          %}
                                     {% endfor %}
                                </table>

                            {% case map[string]interface{} %}
                                      {% code

                                        if colDeep[i] < len(val) {
                                            colDeep[i] = len(val)
                                        }

                                      	sortList := make([]string, 0, len(val))
                                      	for name := range val {
                                      		sortList = append(sortList, name)
                                      	}
                                      	sort.Strings(sortList)
                                      %}
                                      {% for _, key := range sortList %}
                                        <b>{%s= key %}</b>: {%= json.Element(val[key])%}<br>
                                      {% endfor %}

                            {% case []interface{} %}
                                   {%code
                                     if colDeep[i] < len(val) {
                                         colDeep[i] = len(val)
                                     }
                                   %}
                                {% for _, value := range val %}

                                    {% if m, ok := value.(map[string]interface{}); ok %}
                                      <p>
                                      {% for key, value := range m %}
                                        <b>{%s key %}</b>: {%= json.Element(value)%}<br>
                                      {% endfor %}
                                      </p>
                                    {% else %}
                                          {%= json.Element(value) %}
                                    {% endif %}

                                {% endfor %}
                           {% default %}
                                    {%= json.Element(row[i]) %}
                            {% endswitch %}
                        </div>
                    {% endfor %}

                  </div>

                {% endfor %}

            </div>
        </div>
    </div>
</div>
<style>
{% for i, cLen := range colLen %}
  {% code
    if columns[i].BasicType() == types.UnsafePointer {
        cLen = 20 * lSymb
    } else if (cLen > 50 * lSymb) && (colDeep[i] == 1) {
        cLen = 50 * lSymb
    }
    allWidth += cLen

  %}
    .table-col-{%d i%}{
        width: {%d cLen %}px;
    }
    .usr-table-row-cont > .usr-table-row > .table-col-{%d i%}{
       text-align: {% switch columns[i].InputType %}
                    {% case "number" %}center
                    {% case "date", "datetime" %} right
                    {% default %} left
                    {% endswitch %};
    }
{% endfor %}
.table-custom{
    width: {%d allWidth %}px;
}
</style>
{% endfunc %}
{% endcollapsespace %}
{% endstripspace %}
