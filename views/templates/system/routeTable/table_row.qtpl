{% import (
	"regexp"
	"fmt"
	"time"
	"sort"
	"go/types"

	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/httpgo/views/templates/json"
	"github.com/ruslanBik4/httpgo/views/templates/forms"
	)
%}
{%code
	var regHTML = regexp.MustCompile(`>([^<]+)<\/`)
	type TableRender struct {
	    dbEngine.Table
	    columns []*forms.ColumnDecor
	    rows [][] any
	    ApiImport string
	    ApiExport string
        OnlyView bool
	}

	func NewTableRender(table dbEngine.Table, columns []*forms.ColumnDecor, rows [][]any, apiImport string, onlyView bool) *TableRender {
    	return &TableRender{Table: table, columns: columns, rows: rows, ApiImport: apiImport+"import", ApiExport: apiImport+"export", OnlyView: onlyView}
    }
%}
{% func TableRow(columns []*forms.ColumnDecor, rows [][] any) %}
{%code
	t := &TableRender{columns: columns, rows: rows}
%}
<link rel="stylesheet" href="/css/tables.css" media="screen">
<script src="/js/tables.js" async></script>
	{%= t.AllTable() %}
{% endfunc %}
{% func (t *TableRender) AllTable() %}
{% collapsespace %}
{% stripspace %}
<title> Table of "{%s t.Comment() %}"</title>
<div class="sidebar">
{%- if !t.OnlyView -%}
<h2> Import </h2>
<form action="{%s t.ApiImport %}" method="post" enctype="multipart/form-data" onsubmit="return saveForm(this);">
<div id="divFieldImport" class="input-wrap">
<label class="table-files__label" style="height:30px;" title="Choice csv-file for import to table'{%s t.Comment() %}'">
    <span class="hiddenInput">
			<input type="file"
			              id="csv"
			              name="csv"
			              accept=".csv"
			              onchange="handleFileCSVSelect(this);"
			/>
        </span>
 </label>
 </div>
 <div class="input-wrap">
 <label> <input type="checkbox" name="truncate_data" />Truncate table before import </label>
 </div>
 <div class="form-actions">
        <button class="btn-success mx-1" type="submit">Put in table '{%s t.Name() %}'</button>
        <button class="btn-danger mx-1" type="reset">Reset form</button>
</div>
  <output></output>
  <progress value='0' max='100' hidden > </progress>
 </form>
{%- else -%}

{%- endif -%}
<h2> Export</h2>
<a href="{%s t.ApiExport %}" download='{%s t.Name() %}.csv' title="Save data from '{%s t.Comment() %}' to disk (csv)">
 <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" fill="currentColor" class="bi bi-file-arrow-down" viewBox="0 0 16 16">
   <path d="M8 5a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5A.5.5 0 0 1 8 5"/>
   <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1"/>
 </svg>
 </a>
</div>
<div class="usr-table table-custom" id="t_{%s t.Name() %}">
	<div class="usr-table-header">
	    <div class="usr-table__t-head  usr-table-row">
	    {% for i, col := range t.columns %}
	        <div class="usr-table-col  table-col-{%d i%}" a={%d i %}>
	            {% if col.Label == "id" && i < len(t.columns)-1 %}
                    <ul class="left-mnu-list" style="z-index:4;"><li><a>#</a>
	                <ul class="dropdown">go to column...
				    {% for j, c := range t.columns[i+1:] %}
				           <li class="left-mnu-item">
				                <a href='#' onclick="return ScrollToElem('.table-col-{%d i+j+1 %}');" title='{%s c.Label %}'>
				                {%s fmt.Sprintf("%.20s", c.Label) %} </a>
		                   </li>
				    {% endfor %}
				    </ul></li></ul>
	            {% else %} <span column="{%s col.Name() %}">{%s col.Label %}</span>
	            {% endif %}
	        </div>
	    {% endfor %}
	    </div>

	    <div class="usr-table__filter  usr-table-row">
		{% for i, col := range t.columns %}
		<div class="usr-table-col table-col-{%d i%}">
		<div class="filt-arrow">
		{%- if col.LinkNew > "" -%} {%s= col.LinkNew %}
		{% else %}
			{% switch %}
			{% case  col.SelectOptions != nil %}
				<select {%= col.RenderAttr(i) %} data-name="{%s col.InputName(i) %}" onchange="filterTableData(this.selectedOptions[0].text, 'table-col-{%d i%}');">
				{%code
					sortList := make([]string, 0, len(col.SelectOptions))
					for title := range col.SelectOptions {
					 sortList = append(sortList, title)
					}
					sort.Strings(sortList)
				%}
                <option value="" >All</option>
	             {% for _, title := range sortList %}
	                <option value="{%s col.SelectOptions[title].Value %}" >{%s title %}</option>
	             {% endfor %}
                </select>
			{% case col.InputType == "file" %}
	            <span class="hiddenInput" style="background-image: url('%v val %');"> </span>
			{% case col.Suggestions > "" %}
	            <input type="text" src="{%j= col.Suggestions %}" data="{%s col.InputName(i) %}-sel" data-name="{%s col.InputName(i) %}"
	                autocapitalize="none" autocorrect="off" autocomplete="off"
	                onkeyup="inputSearchKeyUp(this,event);" onchange="filterTableData(this.value, 'table-col-{%d i%}');" />
		        <select {%= col.RenderAttr(i) %} size=10 class="suggestions-select-hide {%s col.InputName(i) %}-sel" style="left: -399.109375px; top: 50px;">
		        </select>
			{% case col.InputType == "date" || col.InputType == "datetime" %}
				<input type="date-range" data-name="{%s col.InputName(i) %}" onchange="filterTableData(this.value, 'table-col-{%d i%}');"/>
			{% default %}
				<input type="{%s col.InputType %}" data-name="{%s col.InputName(i) %}" onchange="filterTableData(this.value, 'table-col-{%d i%}');"/>
			{% endswitch %}
		{% endif %}
		</div>
		</div>
		{% endfor %}
		</div>
    </div>

    <div class="usr-table-content">
        <div class="usr-table-content-scroll">
                {%= t.RenderRows() %}
        </div>
    </div>
</div>
{% endfunc %}
{% func (t *TableRender) RenderRowsStyles(lSymb int, colLen, colDeep []int)%}
<style>
  {% code
   allWidth := 0
   %}
{% for i, cLen := range colLen %}
  {% code
    if t.columns[i].BasicType() == types.UnsafePointer && (cLen < 10 * lSymb){
        cLen = 10 * lSymb
    } else if (cLen > 50 * lSymb) && (colDeep[i] == 1) {
        cLen = 50 * lSymb
    }
    allWidth += cLen

  %}
    .table-col-{%d i%}{
        min-width: {%d cLen %}px;
    }
//    .usr-table-row-cont > .usr-table-row > .table-col-{%d i%}{
//       text-align: {% switch t.columns[i].InputType %}
//                    {% case "number" %}center
//                    {% case "date", "datetime" %} right
//                    {% default %} left
//                    {% endswitch %};
//    }
{% endfor %}
.table-custom, .usr-table-content {
    width: {%d allWidth %}px;
}
</style>
{% endfunc %}
{% func RenderTime(i int, val time.Time)%}
	{%- code hour, min, sec := val.Clock() -%}
    {%- if hour > 0 || min > 0 || sec > 0 -%}
        <style> .usr-table-row-cont > .usr-table-row > .table-col-{%d i%}{
            word-break: break-word;
        }
        </style>
        {% if val.Location() == time.UTC %}
            {%s= val.Format("2006-01-02 15:04:05")  %}
        {% else %}
            {%s= val.Format("2006-01-02 15:04:05 Z-0700")  %}
        {%- endif -%}
    {% else %}
        {%s val.Format("2006-01-02") %}
    {%- endif -%}
{% endfunc %}
func render Table rows{
{% func (t *TableRender) RenderRows()%}
	{%code
	   colLen := make([]int, len(t.columns))
	   colDeep := make([]int, len(t.columns))
	   lSymb := 11
	   for i, col := range t.columns {
	        colLen[i] = len(col.Label)*lSymb
	        colDeep[i] = 1
	   }
	%}
<div class="usr-table-row-cont">
   {% for _, row  := range t.rows %}
        <div  class="usr-table-row">
        {% for i, column := range t.columns %}
            <div class="usr-table-col  table-col-{%d i%}">
                {% switch val := row[i].(type) %}
                {% case time.Time %} {%s= RenderTime(i,val) %}
                {% case string %}
                  {%s= val %}
                  {%code
                       lenVal := lSymb
                       s := regHTML.FindString(val)
                       if len(s) > 0 {
                        lenVal *= len(s)
                       } else {
                        lenVal *= len(val)
                       }

                    if lenVal > colLen[i] && (column.Name() != "id") {
                        colLen[i] = lenVal
                    }
                  %}
                {% case bool %}
                  {% if val %}
                    <svg xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="m10.6 16.6 7.05-7.05-1.4-1.4-5.65 5.65-2.85-2.85-1.4 1.4ZM12 22q-2.075 0-3.9-.788-1.825-.787-3.175-2.137-1.35-1.35-2.137-3.175Q2 14.075 2 12t.788-3.9q.787-1.825 2.137-3.175 1.35-1.35 3.175-2.138Q9.925 2 12 2t3.9.787q1.825.788 3.175 2.138 1.35 1.35 2.137 3.175Q22 9.925 22 12t-.788 3.9q-.787 1.825-2.137 3.175-1.35 1.35-3.175 2.137Q14.075 22 12 22Zm0-2q3.35 0 5.675-2.325Q20 15.35 20 12q0-3.35-2.325-5.675Q15.35 4 12 4 8.65 4 6.325 6.325 4 8.65 4 12q0 3.35 2.325 5.675Q8.65 20 12 20Zm0-8Z"/></svg>
                   {% endif %}
                {% case int, int32, int64 %}
                        {%code s := fmt.Sprintf("%v", val)
                            if lenVal := (len(s) + 2) * lSymb; lenVal > colLen[i] {
                                colLen[i] = lenVal
                            }
                        %}
                        {%s s %}
                {% case float32 %}   {%v= val %}
                {% case float64 %}   {%f.2 val %}
                {% case []string %}

                      {% for _, str := range val %}
                       <p>{%s= str %}</p>
                        {%code
                          lenVal := lSymb * (len(str) + 2)
                          if lenVal > colLen[i] {
                            colLen[i] = lenVal
                          }
                        %}
                        {% endfor %}
                      {%code
                        if colDeep[i] < len(val) {
                            colDeep[i] = len(val)
                        }
                      %}

                {% case []int32 %}
                      {% for _, val := range val %}
                        <p>{%v= val %}</p>
                      {% endfor %}

                {% case []int64 %}
                      {% for _, val := range val %}
                        <p>{%v= val %}</p>
                      {% endfor %}

                {% case []float32 %}
                      {% for _, val := range val %}
                        <p>{%v= val %}</p>
                      {% endfor %}

                {% case []float64 %}
                      {% for _, val := range val %}
                        <p>{%v= val %}</p>
                      {% endfor %}

                {% case map[string]string %}
                    <table>
                          {% code

                         if colDeep[i] < len(val) {
                             colDeep[i] = len(val)
                         }

                            sortList := make([]string, 0, len(val))
                            for name := range val {
                                sortList = append(sortList, name)
                            }
                            sort.Strings(sortList)
                          %}
                          {% for _, key := range sortList %}
                            <tr><td><b>{%s= key %}</b></td><td>{%s= val[key] %}</td></tr>
                             {%code
                               lenVal := (lSymb+2) * len(key) + lSymb * len(val[key]) + 2
                               if lenVal > colLen[i] {
                                 colLen[i] = lenVal
                               }
                              %}
                         {% endfor %}
                    </table>

                {% case map[string]any %}
                          {% code

                            if colDeep[i] < len(val) {
                                colDeep[i] = len(val)
                            }

                            sortList := make([]string, 0, len(val))
                            for name := range val {
                                sortList = append(sortList, name)
                            }
                            sort.Strings(sortList)
                          %}
                          {% for _, key := range sortList %}
                            <b>{%s= key %}</b>: {%= json.Element(val[key])%}<br>
                          {% endfor %}

                {% case []any %}
                       {%code
                         if colDeep[i] < len(val) {
                             colDeep[i] = len(val)
                         }
                       %}
                    {% for _, value := range val %}

                        {% if m, ok := value.(map[string]any); ok %}
                          <p>
                          {% for key, value := range m %}
                            <b>{%s key %}</b>: {%= json.Element(value)%}<br>
                          {% endfor %}
                          </p>
                        {% else %}
                              {%= json.Element(value) %}
                        {% endif %}

                    {% endfor %}
               {% default %}
                        {%= json.Element(row[i]) %}
                {% endswitch %}
            </div>
        {% endfor %}

      </div>
    {% endfor %}
</div>
    {%= t.RenderRowsStyles(lSymb, colLen, colDeep) %}
   <script>
    SetTableEvents()
   </script>
{% endfunc %}
}
{% endcollapsespace %}
{% endstripspace %}
