{% import (
	"regexp"
	"fmt"
	"time"
	"sort"
	"go/types"

	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/httpgo/views/templates/json"
	"github.com/ruslanBik4/httpgo/views/templates/forms"
	)
%}
{%code
	var regHTML = regexp.MustCompile(`>([^<]+)<\/`)
	type TableRender struct {
	    dbEngine.Table
	    ApiImport string
        OnlyView bool
	}
%}
{% func TableRow(columns []*forms.ColumnDecor, rows [][] any) %}
{%code
	t := &TableRender{}
%}
	{%= t.AllTable(columns, rows) %}
{% endfunc %}
{% func (t *TableRender) AllTable(columns []*forms.ColumnDecor, rows [][] any) %}
<style>
{%= TableCSS() %}
{%code
   colLen := make([]int, len(columns))
   colDeep := make([]int, len(columns))
   lSymb := 11
   allWidth := 0
   for i, col := range columns {
        colLen[i] = len(col.Label)*lSymb
        colDeep[i] = 1
   }
%}
</style>
<script>
function ClickPseudo(event) {
var elem = event.target;
var offset = event.offsetX || event.originalEvent.offsetX;
    console.log(`${offset} > ${elem.offsetWidth}`);
    if (offset > elem.offsetWidth) {
        loadTable(elem.attributes.column.value);
    } else {
        elem.color = 'blue';
    }
}
function loadTable(order_by) {
$.ajaxSetup({
    'headers':{'Authorization': 'Bearer ' + token}
});
var url = document.location.href;
if (document.location.search > "") {
	url += '&'
} else {
	url +='?'
}
$('.usr-table-row-cont').load(url + 'order_by=' + order_by + ' .usr-table-row-cont');
return true;
}
function getElementsByText(str, name) {
  var items = document.getElementsByClassName(name);
  var elem = Array.prototype.slice.call(items).forEach(
  function(el, ind, arr) {
    if (str.trim() == "") {
        el.parentElement.style = "";
        return true;
    }
    if ( el.textContent.includes( str.trim() )
        || el.parentElement.className.includes("usr-table__t-head")
        || el.parentElement.className.includes("usr-table__filter")) {
        el.parentElement.style = "";
        return true;
    }
     el.parentElement.style = "display:none";
    });
    return
  if (elem.length > 0) {
//todo- chg on each
    elem[0].scrollIntoView({block: "center", behavior: "smooth"});
    elem[0].focus();
    elem[0].animate([
      {color: 'blue'},
      {color: 'red'}
    ], {
        duration: 3000,
        iterations: 100
    });
  }
}
function ScrollToElem(selector) {
	var list = $(selector);
	if (list.length > 0) {
		list[0].scrollIntoView(100);
	} else {
		alert(selector + ' not found!');
	}
	return true;
}
$(function(){
 $('.usr-table__t-head .usr-table-col:nth-child(n+2)  span').click(ClickPseudo);
});
   function handleFileCSSSelect(evt) {
     var files = evt.files || evt.target.files; // FileList object
     if (files.length < 1)
       return false;

     let  $progress = $('#progress').show(),
       reader = new FileReader(),
       f = files[0];

     reader.onload = (function (theFile) {
       return function (e) {
         csv = e.target.result.csvToArray({head:true, rSep: "\n"});
         fText = '';
         csv.forEach(function(elem){
            row = '';
            elem.forEach(function(cell,i){
                row += `<div  class="usr-table-col  table-col-${i}">${cell}</div>`;
            });
            console.log(row);
            fText += `<div  class="usr-table-row">${row}</div>`;
        });
         $('#t_{%s t.Name() %} .usr-table-row-cont').html(fText);
       };
     })(f);

     // Read in the image file as a data URL.
     reader.readAsText(f);
   }

</script>
{% collapsespace %}
{% stripspace %}
<script src="https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/csv-to-array/csvToArray.v2.1.min.js"></script>
<title> Table of "{%s t.Comment() %}"</title>
{%- if !t.OnlyView -%}
<div class="sidebar">
<form action="{%s t.ApiImport %}" method="post" enctype="multipart/form-data" onsubmit= "return saveForm(this);">
<h2> Import to '{%s t.Comment() %}'</h2>
<label for="csv" class="table-files__label" style="height:30px;">
                <span class="hiddenInput">
						<input type="file"
						              id="csv"
						              name="csv"
						              accept=".csv"
						              onchange="handleFileCSSSelect(this);"
						/>
                    </span>
 </label>
 <p>
 <label for="truncate_data"> Truncate table before import <input type="checkbox" name="truncate_data" />
 </label>
 </p>
        <button type="submit">Put in table '{%s t.Name() %}'</button>
        <button type="reset">Reset form</button>

  <output></output>
  <progress value='0' max='100' hidden > </progress>
 </form>
 <a href=""> Save data to disk </a>
</div>
{%- endif -%}
<div class="usr-table  table-custom" id="t_{%s t.Name() %}">
	<div class="usr-table-header">
	    <div class="usr-table__t-head  usr-table-row">
	    {% for i, col := range columns %}
	        <div class="usr-table-col  table-col-{%d i%}" a={%d i %}>
	            {% if col.Label == "id" && i < len(columns)-1 %}
        <style> .usr-table-header > .usr-table__t-head > .table-col-{%d i%}{
//            position: sticky;
        }
        </style>	                <ul class="top-mnu-list" style="z-index:100;"><li><a>#</a>
	                <ul class="dropdown">go to column...
				    {% for j, c := range columns[i+1:] %}
				           <li class="top-mnu-item">
				                <a href='#' onclick="return ScrollToElem('.table-col-{%d i+j+1 %}');" title='{%s c.Label %}'>
				                {%s fmt.Sprintf("%.20s", c.Label) %} </a>
		                   </li>
				    {% endfor %}
				    </ul></li></ul>
	            {% else %} <span column="{%s col.Name() %}">{%s col.Label %}</span>
	            {% endif %}
	        </div>
	    {% endfor %}
	    </div>

	    <div class="usr-table__filter  usr-table-row">
		{% for i, col := range columns %}
		<div class="usr-table-col table-col-{%d i%}">
		<div class="filt-arrow">
		{%- if col.LinkNew > "" -%} {%s= col.LinkNew %}
		{% else %}
			{% switch %}
			{% case  col.SelectOptions != nil %}
				<select {%= col.RenderAttr(i) %} onchange="getElementsByText(this.value, 'table-col-{%d i%}');">
				{%code
					sortList := make([]string, 0, len(col.SelectOptions))
					for title := range col.SelectOptions {
					 sortList = append(sortList, title)
					}
					sort.Strings(sortList)
				%}
                <option value="" >All</option>
	             {% for _, title := range sortList %}
	                <option value="{%s title %}" >{%s title %}</option>
	             {% endfor %}
                </select>
			{% case col.InputType == "file" %}
	            <span class="hiddenInput" style="background-image: url('%v val %');"> </span>
			{% case col.Suggestions > "" %}
	            <input type="text" src="{%j= col.Suggestions %}" data="{%s col.InputName(i) %}-sel"
	                autocapitalize="none" autocorrect="off" autocomplete="off"
	                onkeyup="inputSearchKeyUp(this,event);" />
		        <select {%= col.RenderAttr(i) %} size=10 class="suggestions-select-hide {%s col.InputName(i) %}-sel" style="left: -399.109375px; top: 50px;">
		        </select>
			{% default %}
				<input type="{%s col.InputType %}" onchange="getElementsByText(this.value, 'table-col-{%d i%}');"/>
			{% endswitch %}
		{% endif %}
		</div>
		</div>
		{% endfor %}
		</div>
    </div>

    <div class="usr-table-content">
        <div class="usr-table-content-scroll">
            <div class="usr-table-row-cont">
               {% for _, row  := range rows %}
                    <div  class="usr-table-row">
                    {% for i, column := range columns %}
                        <div class="usr-table-col  table-col-{%d i%}">
                            {% switch val := row[i].(type) %}
                            {% case time.Time %} {%s= RenderTime(i,val) %}
                            {% case string %}
                              {%s= val %}
                              {%code
                                   lenVal := lSymb
                                   s := regHTML.FindString(val)
                                   if len(s) > 0 {
                                    lenVal *= len(s)
                                   } else {
                                    lenVal *= len(val)
                                   }

                                if lenVal > colLen[i] && (column.Name() != "id") {
                                    colLen[i] = lenVal
                                }
                              %}
                            {% case bool %}
                              {% if val %}
                                <svg xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="m10.6 16.6 7.05-7.05-1.4-1.4-5.65 5.65-2.85-2.85-1.4 1.4ZM12 22q-2.075 0-3.9-.788-1.825-.787-3.175-2.137-1.35-1.35-2.137-3.175Q2 14.075 2 12t.788-3.9q.787-1.825 2.137-3.175 1.35-1.35 3.175-2.138Q9.925 2 12 2t3.9.787q1.825.788 3.175 2.138 1.35 1.35 2.137 3.175Q22 9.925 22 12t-.788 3.9q-.787 1.825-2.137 3.175-1.35 1.35-3.175 2.137Q14.075 22 12 22Zm0-2q3.35 0 5.675-2.325Q20 15.35 20 12q0-3.35-2.325-5.675Q15.35 4 12 4 8.65 4 6.325 6.325 4 8.65 4 12q0 3.35 2.325 5.675Q8.65 20 12 20Zm0-8Z"/></svg>
                               {% endif %}
                            {% case int, int32, int64 %}
                                    {%code s := fmt.Sprintf("%v", val)
		                                if lenVal := len(s) * lSymb; lenVal > colLen[i] {
		                                    colLen[i] = lenVal
		                                }
                                    %}
                                    {%s s %}
                            {% case float32 %}   {%v= val %}
                            {% case float64 %}   {%f.2 val %}
                            {% case []string %}

                                  {% for _, str := range val %}
                                   <p>{%s= str %}</p>
                                    {%code
                                      lenVal := lSymb * (len(str) + 2)
                                      if lenVal > colLen[i] {
                                        colLen[i] = lenVal
                                      }
                                    %}
                                    {% endfor %}
                                  {%code
                                    if colDeep[i] < len(val) {
                                        colDeep[i] = len(val)
                                    }
                                  %}

                            {% case []int32 %}
                                  {% for _, val := range val %}
                                    {%v= val %}
                                  {% endfor %}

                            {% case []int64 %}
                                  {% for _, val := range val %}
                                    {%v= val %}
                                  {% endfor %}

                            {% case map[string]string %}
                                <table>
                                      {% code

                                     if colDeep[i] < len(val) {
                                         colDeep[i] = len(val)
                                     }

                                     	sortList := make([]string, 0, len(val))
                                      	for name := range val {
                                      		sortList = append(sortList, name)
                                      	}
                                      	sort.Strings(sortList)
                                      %}
                                      {% for _, key := range sortList %}
                                        <tr><td><b>{%s= key %}</b></td><td>{%s= val[key] %}</td></tr>
                                         {%code
                                           lenVal := (lSymb+2) * len(key) + lSymb * len(val[key]) + 2
                                           if lenVal > colLen[i] {
                                             colLen[i] = lenVal
                                           }
                                          %}
                                     {% endfor %}
                                </table>

                            {% case map[string]any %}
                                      {% code

                                        if colDeep[i] < len(val) {
                                            colDeep[i] = len(val)
                                        }

                                      	sortList := make([]string, 0, len(val))
                                      	for name := range val {
                                      		sortList = append(sortList, name)
                                      	}
                                      	sort.Strings(sortList)
                                      %}
                                      {% for _, key := range sortList %}
                                        <b>{%s= key %}</b>: {%= json.Element(val[key])%}<br>
                                      {% endfor %}

                            {% case []any %}
                                   {%code
                                     if colDeep[i] < len(val) {
                                         colDeep[i] = len(val)
                                     }
                                   %}
                                {% for _, value := range val %}

                                    {% if m, ok := value.(map[string]any); ok %}
                                      <p>
                                      {% for key, value := range m %}
                                        <b>{%s key %}</b>: {%= json.Element(value)%}<br>
                                      {% endfor %}
                                      </p>
                                    {% else %}
                                          {%= json.Element(value) %}
                                    {% endif %}

                                {% endfor %}
                           {% default %}
                                    {%= json.Element(row[i]) %}
                            {% endswitch %}
                        </div>
                    {% endfor %}

                  </div>

                {% endfor %}

            </div>
        </div>
    </div>
</div>
<style>
{% for i, cLen := range colLen %}
  {% code
    if columns[i].BasicType() == types.UnsafePointer && (cLen < 10 * lSymb){
        cLen = 10 * lSymb
    } else if (cLen > 50 * lSymb) && (colDeep[i] == 1) {
        cLen = 50 * lSymb
    }
    allWidth += cLen

  %}
    .table-col-{%d i%}{
        width: {%d cLen %}px;
    }
//    .usr-table-row-cont > .usr-table-row > .table-col-{%d i%}{
//       text-align: {% switch columns[i].InputType %}
//                    {% case "number" %}center
//                    {% case "date", "datetime" %} right
//                    {% default %} left
//                    {% endswitch %};
//    }
{% endfor %}
.table-custom{
    width: {%d allWidth %}px;
}
</style>
{% endfunc %}
{% func RenderTime(i int, val time.Time)%}
	{%- code hour, min, sec := val.Clock() -%}
    {%- if hour > 0 || min > 0 || sec > 0 -%}
        <style> .usr-table-row-cont > .usr-table-row > .table-col-{%d i%}{
            word-break: break-word;
        }
        </style>
        {% if val.Location() == time.UTC %}
            {%s= val.Format("2006-01-02 15:04:05")  %}
        {% else %}
            {%s= val.Format("2006-01-02 15:04:05 Z-0700")  %}
        {%- endif -%}
    {% else %}
        {%s val.Format("2006-01-02") %}
    {%- endif -%}
{% endfunc %}
{% endcollapsespace %}
{% endstripspace %}
