// Copyright 2017 Author: Ruslan Bikchentaev. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{% import (
    "strings"
    "github.com/ruslanBik4/httpgo/models/db/qb"
) %}

Формируем JSON, который затем будет использован в форме на клиенте
dataJson и содержимое AddJson вставляются КАК ЕСТЬ, ПОТОМУ ЧТО БЫЛИ ОБРАБОТАНЫ РАНЕЕ!!!
{% stripspace %}
{% collapsespace %}
{% func CheckFields(fields map[string] *qb.QBField) %}

{% for COLUMN_NAME, qbField := range fields %}

    {% code

        field     := qbField.GetSchema()
        titleFull, titleLabel, placeholder, pattern, dataJson := field.GetColumnTitles()
        typeInput := field.TypeInput()
    %}
    "{%s field.COLUMN_NAME %}": {
            {% comment %} qbField.Value != nil
             для чекбоксов выставляем Value
            {% endcomment %}
        {% if typeInput == "checkbox" %} "value": 1, {% endif %}

        {% if (COLUMN_NAME=="id") || field.IsHidden  %}
            "type": "hidden" },
            {% continue %}
        {% endif %}

        {% if field.IS_NULLABLE=="NO" %} "required": true, {% endif %}
        {% if titleFull > "" %} "title": "{%j= titleFull %}", {% endif %}
        {% if titleLabel > "" %} "label": "{%j= titleLabel %}", {% endif %}
        {% if placeholder > "" %} "placeholder": "{%j placeholder %}", {% endif %}
        {% if pattern > "" %} "pattern": "{%j= pattern %}", {% endif %}
        {% if dataJson > "" %} {%s= dataJson %}, {% endif %}
        {% if field.CSSClass > "" %} "CSSClass": "{%j field.CSSClass %}",{% endif %}
        {% if field.CSSStyle > "" %} "CSSStyle": "{%j field.CSSStyle %}",{% endif %}
        {% if field.Figure > "" %}   "Figure": "{%j field.Figure %}",      {% endif %}
        {% if field.CHARACTER_MAXIMUM_LENGTH>0 %} "maxLength": {%d field.CHARACTER_MAXIMUM_LENGTH %}, {% endif %}
        {% if strings.Contains(field.COLUMN_TYPE, "unsigned") %} "min":0, {% endif %}
        {% if field.MinDate > "" %} "minDate": "{%j= field.MinDate %}",  {% endif %}
        {% if field.MaxDate > "" %} "maxDate": "{%j= field.MaxDate %}",  {% endif %}
        {% if len(field.Events) > 0 %}
        "Events": {
            {% for name, funcName := range field.Events %}
                "{%s name %}": "{%j= funcName %}",
            {% endfor %}
        "count": {%d len(field.Events) %}
        },
        {% endif %}
        {% if field.COLUMN_DEFAULT > "" %}
            "default":
                {% switch field.DATA_TYPE %}
	            {% case "tinyint" %}
	               {% if field.COLUMN_DEFAULT == "1" %}
	                    true
	               {% else %}
	                    false
	               {% endif %}
	            {% case "int", "uint", "int64" %}
	                {%s= field.COLUMN_DEFAULT %}
	            {% case "float", "double" %}
	                {%s= field.COLUMN_DEFAULT %}
                {% default %}
                    "{%j= field.COLUMN_DEFAULT %}"
                {% endswitch %}
              ,
        {% endif %}
        {% if field.CHARACTER_SET_NAME > "" %}"charSet": "{%s field.CHARACTER_SET_NAME %}",{% endif %}
        {% if len(qbField.SelectValues) > 0 %}
            "list": {
                {% for key, val := range qbField.SelectValues %}
                    "{%d key %}":"{%j= val %}",
                {% endfor %}
                "count": {%d len(qbField.SelectValues) %}
            },
            {% comment %}
                это применяем только для полей, у которых нет SelectValues
                исключаем SETID_, NODEID_
            {% endcomment %}
        {% elseif len(field.EnumValues) > 0 %}
            "list": [{% for i, val := range field.EnumValues %}{% if i>0 %},{% endif %}"{%j= val %}"{% endfor %}],
        {% endif %}

        {% if field.TABLEID %}
            "list": {{%= CheckFields(qbField.ChildQB.GetFields().Fields) %}},
        {% endif %}

        "type": "{%j= typeInput %}"
            },
{% endfor %}
"count": {%d len(fields) %}

{% endfunc %}


{% func (thisForm *FormStructure) JSONAnyForm(table qb.QBTable, arrJSON map[string]interface{}) %}
{%code
   thisForm.setFormDefaults(table.GetSchema())
%}
{
 "fields": {
    {%= CheckFields(table.Fields) %}

},
"form": {
               {% if thisForm.ClassCSS != "" %} "class" : "{%j= thisForm.ClassCSS %}", {% endif %}
               "action" : "{%j= thisForm.Action %}",
               "id" : "{%j= thisForm.IdCSS %}",
               "name": "{%j= thisForm.Name %}"
                {% for name, event := range thisForm.Events %}
                    ,"{%s name %}": "{%j= event %}"
                {% endfor %}
}

    {% for key, value := range arrJSON %}
            , "{%s key %}": {%= Element(value)%}
   {% endfor %}
}
{% endfunc %}
{% endcollapsespace %}
{% endstripspace %}
