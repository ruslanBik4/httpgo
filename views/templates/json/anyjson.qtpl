{% import (
    "sort"
	"github.com/ruslanBik4/gotools"
) %}

{% stripspace %}
{% collapsespace %}
{% func SliceJSON(mapJSON []map[string]interface{}) %}
[
    {% for key, arrJSON := range mapJSON %}
        {% if key>0 %}, {% endif %} {%= AnyJSON(arrJSON)%}
    {% endfor %}
]
{% endfunc %}

получаем объект произвольной формы и возвращаем JSON текстом
{% func AnyJSON(arrJSON map[string]interface{}) %}
{ {% code
	sortList := make([]string, 0, len(arrJSON))
	for name := range arrJSON {
		sortList = append(sortList, name)
	}
	sort.Strings(sortList)
  %}
   {% for key, name := range sortList %}
      {% if key>0 %}, {% endif %} "{%j= name %}": {%= Element(arrJSON[name])%}
   {% endfor %}
 }
{% endfunc %}
{% func StringJSON(arrJSON map[string]string) %}
{ {% code
	sortList := make([]string, 0, len(arrJSON))
	for name := range arrJSON {
		sortList = append(sortList, name)
	}
	sort.Strings(sortList)
  %}
   {% for key, name := range sortList %}
      {%- if key>0 -%}, {%- endif -%} "{%j= name %}": {%= Element(arrJSON[name])%}
   {% endfor %}
 }
{% endfunc %}

write string with escaping
{%- func String(str string) -%}
"{%j= str %}"
{%- endfunc -%}

write string with escaping
{%- func ByteAsString(b []byte) -%}
 {%= String(gotools.BytesToString(b)) %}
{%- endfunc -%}

write element according to its type
{%- func Element(value any) -%}
    {% switch vv := value.(type) %}
      {% case string %} {%= String(vv) %}
      {% case []byte %} {%= ByteAsString(vv) %}
      {% case bool %} {%v vv %}
      {% case int %} {%d vv %} 
      {% case uint %} {%d int(vv) %} 
      {% case int32 %} {%d int(vv) %} 
      {% case int64 %} {%dl vv %}
      {% case float32 %} {%v vv %}
      {% case float64 %} {%f vv %}
      {% case nil %}  null
      {% case []int32 %}
            {%= Slice(vv) %}
      {% case []int64 %}
            {%= Slice(vv) %}
      {% case []float32 %}
            {%= Slice(vv) %}
      {% case []float64 %}
            {%= Slice(vv) %}
      {% case []string %}
            {%= Slice(vv) %}
      {% case []any %}
            {%= Slice(vv) %}
      {% case map[string]string %}
            {%= Map(vv) %}
      {% case map[string]int %}
            {%= Map(vv) %}
      {% case map[string]bool %}
            {%= Map(vv) %}
      {% case map[string]any %}
            {%= Map(vv) %}
      {% case map[int]string %}
            {%= Map(vv) %}
      {% case map[int]int %}
            {%= Map(vv) %}
      {% case map[int]any %}
            {%= Map(vv) %}
      {% case map[bool]string %}
            {%= Map(vv) %}
      {% case map[bool]int %}
            {%= Map(vv) %}
      {% case map[bool]any %}
            {%= Map(vv) %}
      {% case []map[string]any %}
            {%= Slice(vv) %}
      {% case []map[int]any %}
            {%= Slice(vv) %}
      {% case []map[bool]any %}
            {%= Slice(vv) %}
      {% default %}
            {%= Wrap(value) %}
      {% endswitch %}
{% endfunc %}
{% endcollapsespace %}
{% endstripspace %}

