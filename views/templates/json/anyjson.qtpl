All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
выводим массив массивов (основное назначение для таблиц БД)
{% stripspace %}
{% collapsespace %}

{% func SliceJSON(mapJSON MapMultiDimension) %}
[
{% for key, arrJSON := range mapJSON %}
    {% if key>0 %}, {% endif %} {%= AnyJSON(arrJSON)%}
{% endfor %}
]
{% endfunc %}

получаем объект произвольной формы и возвращаем JSON текстом
{% func AnyJSON(arrJSON MultiDimension) %}
{ {% code comma := "" %}
   {% for key, value := range arrJSON %}
        {%s comma %} "{%s key %}": {%= Element(value)%} {% code comma = "," %}
   {% endfor %}
 }
{% endfunc %}

пишем элемент массива в зависемости от типа
{% func Element(value interface{}) %}
    {% switch vv := value.(type) %}
      {% case string %} "{%j vv %}"
      {% case bool %} {%v vv %}
      {% case int %} {%d vv %} 
      {% case uint %} {%d int(vv) %} 
      {% case int32 %} {%d int(vv) %} 
      {% case int64 %} {%dl vv %}
      {% case float32 %} {%f float64(vv) %}
      {% case float64 %} {%f vv %}
      {% case nil %}  null
      {% case stringDimension %}
            {%= StringDimension(vv) %}
      {% case simpleDimension %}
            {%= SimpleDimension(vv) %}
      {% case MultiDimension %}
            {%= AnyJSON(vv) %}
      {% case MapMultiDimension %}
            {%= SliceJSON(vv) %}
      {% default %}
            {% if vSimple, ok := vv.([]interface{}); ok %}
                {%= SimpleDimension(vSimple) %}
            {% elseif arrJSON, ok := vv.(map[string]interface{}); ok %}
                {%= AnyJSON(arrJSON) %}
            {% elseif mapArrJSON, ok := vv.([]map[string]interface{}); ok %}
                {%= SliceJSON(mapArrJSON) %}
            {% else %}
                "{%v vv %}"
            {% endif %}
     {% endswitch %}
{% endfunc %}
получаем массив произвольной формы и возвращаем JSON текстом
{% func ArrJSON(arrJSON []interface{} ) %}
 [ {% code comma := "" %}
    {% for _, value := range  arrJSON %} {%s comma %} {%= Element(value) %} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив объектов произвольной формы и возвращаем JSON текстом
{% func SimpleDimension(arrJSON simpleDimension ) %}
[  {% code comma := "" %}
    {% for _, value := range  arrJSON %} {%s comma %} {%= Element(value)%} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив строк и возвращаем JSON текстом
{% func StringDimension(arrJSON stringDimension) %}
 [ {% code comma := "" %}
    {% for _, value := range  arrJSON %} {%s comma %} {%= Element(value)%} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
{% endstripspace %}
{% endcollapsespace %}

