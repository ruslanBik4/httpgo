All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
выводим массив массивов (основное назначение для таблиц БД)
{% import (
    "sort"
) %}

{% stripspace %}
{% collapsespace %}

{% func SliceJSON(mapJSON []map[string]interface{}) %}
[
{% for key, arrJSON := range mapJSON %}
    {% if key>0 %}, {% endif %} {%= AnyJSON(arrJSON)%}
{% endfor %}
]
{% endfunc %}

получаем объект произвольной формы и возвращаем JSON текстом
{% func AnyJSON(arrJSON map[string]interface{}) %}
{ {% code
	sortList := make([]string, 0, len(arrJSON))
	for name := range arrJSON {
		sortList = append(sortList, name)
	}
	sort.Strings(sortList)
  %}
   {% for key, name := range sortList %}
      {% if key>0 %}, {% endif %} "{%s name %}": {%= Element(arrJSON[name])%}
   {% endfor %}
 }
{% endfunc %}
{% func StringJSON(arrJSON map[string]string) %}
{ {% code
	sortList := make([]string, 0, len(arrJSON))
	for name := range arrJSON {
		sortList = append(sortList, name)
	}
	sort.Strings(sortList)
  %}
   {% for key, name := range sortList %}
      {% if key>0 %}, {% endif %} "{%s name %}": {%= Element(arrJSON[name])%}
   {% endfor %}
 }
{% endfunc %}

пишем элемент массива в зависемости от типа
{% func Element(value interface{}) %}
    {% switch vv := value.(type) %}
      {% case string %} "{%j vv %}"
      {% case bool %} {%v vv %}
      {% case int %} {%d vv %} 
      {% case uint %} {%d int(vv) %} 
      {% case int32 %} {%d int(vv) %} 
      {% case int64 %} {%dl vv %}
      {% case float32 %} {%f float64(vv) %}
      {% case float64 %} {%f vv %}
      {% case nil %}  null
      {% case []int32 %}
            {%= Int32Dimension(vv) %}
      {% case []int64 %}
            {%= Int64Dimension(vv) %}
      {% case []float32 %}
            {%= Float32Dimension(vv) %}
      {% case []float64 %}
            {%= Float64Dimension(vv) %}
      {% case []string %}
            {%= StringDimension(vv) %}
      {% case []interface{} %}
            {%= SimpleDimension(vv) %}
      {% case map[string]string %}
            {%= StringJSON(vv) %}
      {% case map[string]interface{} %}
            {%= AnyJSON(vv) %}
      {% case []map[string]interface{} %}
            {%= SliceJSON(vv) %}
      {% default %}
            {%= Wrap(value) %}
      {% endswitch %}
{% endfunc %}
получаем массив произвольной формы и возвращаем JSON текстом
{% func ArrJSON(arrJSON []interface{} ) %}
 [ {% code comma := "" %}
    {% for _, value := range  arrJSON %} {%s comma %} {%= Element(value) %} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив объектов произвольной формы и возвращаем JSON текстом
{% func SimpleDimension(arrJSON []interface{} ) %}
[  {% code comma := "" %}
    {% for _, value := range  arrJSON %} {%s comma %} {%= Element(value)%} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив строк и возвращаем JSON текстом
{% func StringDimension(arrJSON []string) %}
 [ {% code comma := "" %}
    {% for _, value := range  arrJSON %} {%s comma %} {%= Element(value)%} {% code  comma = ","   %}
    {% endfor %}
 ]
{% endfunc %}
получаем массив int32 и возвращаем JSON текстом
{% func Int32Dimension(arrJSON []int32) %}
 [
    {% for key, value := range  arrJSON %} {% if key>0 %}, {% endif %} {%= Element(value)%}
    {% endfor %}
 ]
{% endfunc %}
получаем массив int64 и возвращаем JSON текстом
{% func Int64Dimension(arrJSON []int64) %}
 [
    {% for key, value := range  arrJSON %} {% if key>0 %}, {% endif %} {%= Element(value)%}
    {% endfor %}
 ]
{% endfunc %}
получаем массив float32 и возвращаем JSON текстом
{% func Float32Dimension(arrJSON []float32) %}
 [
    {% for key, value := range  arrJSON %} {% if key>0 %}, {% endif %} {%= Element(value)%}
    {% endfor %}
 ]
{% endfunc %}
получаем массив float64 и возвращаем JSON текстом
{% func Float64Dimension(arrJSON []float64) %}
 [
    {% for key, value := range  arrJSON %} {% if key>0 %}, {% endif %} {%= Element(value)%}
    {% endfor %}
 ]
{% endfunc %}
{% endcollapsespace %}
{% endstripspace %}

