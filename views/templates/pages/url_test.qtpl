All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
{% import (
    	"go/types"

	"github.com/ruslanBik4/httpgo/views/templates/layouts"
)
%}
{% code
type ParamUrlTestPage struct{
         Basic *types.Basic
         Name string
    IsSlice bool
         Value interface{}
         Req bool
         Type string
         Comment string
}

type URLTestPage struct {
    Host string
    Method string
    Multipart bool
    Path string
    Language string
    Charset string
    LinkStyles []string
    MetaTags []string
    Params [] ParamUrlTestPage
    Resp string
}
%}
{% stripspace %}
{% collapsespace %}
{% func (p *ParamUrlTestPage) TypeInput() %}
       {% switch p.Basic.Info() %}
       {% case types.IsInteger, types.IsFloat, types.IsComplex %}
           number
       {% case types.IsString %}
           text
       {% case types.IsBoolean %}
           checkbox
       {% default %}
           {%v p.Basic.Info() %}
       {% endswitch %}
{% endfunc %}

{% func (u *URLTestPage) URL()  %}
    {%s u.Host %}{%s u.Path %}
{% endfunc %}

{% func (u *URLTestPage) EncType()  %}
    {% if u.Multipart %}
        multipart/form-data
    {% else %}
    {% endif %}
{% endfunc %}


{% endstripspace %}
{% endcollapsespace %}

{% func (u *URLTestPage) ShowURlTestPage() %}
<body>
{%= layouts.PutStyles() %}
<div class="content-wrap">
<div id="container-fluid">
    <div class="row-fluid">
        <div class="sidebar-section">
            <div id="catalog_pane"  class="well sidebar-nav">
{% stripspace %}
{% collapsespace %}
            <form action="{%= u.URL() %}" method="{%s u.Method %}" enctype="{%= u.EncType() %}" target="_blank">
                  {% for _, param := range u.Params %}
                     <p>{%s param.Comment %}</p>
                     <input name='{%s param.Name %}{% if param.IsSlice %} [] {% endif %}'
                      {% if param.Value != nil %}
                            value='{%v param.Value %}'
                      {% endif %}
                     type='{%= param.TypeInput() %}'
                     {% if param.Req %}
                     required
                     {% endif %}
                     />
                  {% endfor %}
                  <button> Send real URL "{%= u.URL() %}"</button>
           </form>
{% endstripspace %}
{% endcollapsespace %}

            </div>
        </div>
        <div class="content-sep"> </div>
         <div class="content-section">
         <div id="content" rel="/admin/">
           <span>  Phyton code </span>
           <pre >
            import requests

            WEBKIT = '------WebKitFormBoundary7MA4YWxkTrZu0gW'
            HEADERS = {
                    'Authorization': 'Bearer 2571020569',
                    'content-type': "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
                }


            def post_multipart(url: str, data: dict):
                return requests.post(
                    url, files={
                        k: (None, v) for k, v in data.items()
                    }, headers=headers
                )

            def post_json(url: str, data: dict):
                return requests.post(
                    url, data=data,
                    headers={'Content-Type': 'application/json', **headers}
                )

            def ta_request(path, params):
                payload = ''
                for p in params:
                    payload += '%s\r\nContent-Disposition: form-data; name=\"%s\"\r\n\r\n%s\r\n' % (WEBKIT, p[0], p[1])

                payload += '%s--' % WEBKIT

                response = requests.request("POST", path, data=payload, headers=HEADERS).json()


            if __name__ == '__main__':
                ta_request("{%= u.URL() %}", [
                 {% for _, param := range u.Params %}
                    {% if param.Req %}
                        required
                    {% endif %}
                    ('{%s param.Name %}','{%v param.Value %}'), // type: {%s param.Type %},  {%s param.Comment %}
                 {% endfor %}
                ])
                </pre>

           <span>  JS code </span>
           <pre>
           request({
             'multipart/form-data',
             'POST',
             processData = true,
             "{%= u.URL() %}",
             {
                   {% for _, param := range u.Params %}
                      "{%s param.Name %}": {%v param.Value %},// type: {%s param.Type %},  {%s param.Comment %}
                   {% endfor %}
              },
             beforeSend = null,
             complete = null,
             error = null,
             success = null,
             withoutAPI = false,
             onprogress = null
           })
           </pre>
           {% if u.Resp > "" %}
            <span>  Response example </span>
          <div>
             {%s u.Resp %}
           </div>
           {%endif%}
            </div>
        </div>
        </div>
        </div>

</div>

</body>
{% endfunc %}
