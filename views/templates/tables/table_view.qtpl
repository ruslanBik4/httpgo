All the text outside function templates is treated as comments,
i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.

показ табличных данных.
{%  import (
    "github.com/ruslanBik4/httpgo/views/templates/forms"
    "database/sql"
    "log"
    "fmt"
   "strings"
   "strconv"
)
%}
{% func (query *QueryStruct) FineTable() %}
        {%  code
            if err := query.beforeRender(); err != nil {
                return
            }
        %}
<link href="/tables.css" rel="stylesheet">
<script src="/tables.js"></script>
    <script  src="/webcomponents.js"></script>
    <link rel="import" href="/components/iron-ajax/iron-ajax.html">
<link rel="import" href="/components/paper-datatable/paper-datatable-card.html">
<link rel="import" href="/components/paper-datatable/paper-datatable.html">
<template is="dom-bind">
<iron-ajax url="/data.json" handle-as='json' last-response="{{data}}" auto></iron-ajax>
<paper-datatable data="{{data}}" progress="True">
            {% for idx, fieldName := range query.columns %}
                {% code
                        fieldStruct := query.fields[idx]
                        titleLabel  := fieldStruct.COLUMN_COMMENT
                %}
	            <paper-datatable-column header="{%s titleLabel %}" property="{%s fieldName %}" default="-"
	            type=
	            {% switch fieldStruct.DATA_TYPE %}
	            {% case "varchar" %} "String" align="left"
	            {% case "date" %} "Date"
	            {% case "set", "enum" %} "Array"
	            {% default %}  "Number" align="right"
	            {% endswitch %}
	            sortable {% if query.Order==fieldName %}sorted{% endif %}></paper-datatable-column>
            {% endfor %}
</paper-datatable>
</template>
<script>
        var app = document.querySelector('#app');
        app.data = [
        {% for query.Rows.Next() %}
            {%  code
                if err := query.Rows.Scan(query.row...); err != nil {
                    log.Println(err)
                    continue
                }
            %}
{% collapsespace %}
{% stripspace %}
		    {
		    {% for idx, rawField := range query.row %}
                {% code
                    var fieldStruct *forms.FieldStructure

                    switch rawField.(type) {
                        case *forms.FieldStructure:
                            fieldStruct = rawField.(*forms.FieldStructure)
                        default:
                            fieldStruct = query.fields[idx]
                    }
                    key := fieldStruct.COLUMN_NAME
                    val := fieldStruct.Value
                %}{%s key %}:
	            {% switch fieldStruct.DATA_TYPE %}
	            {% case "varchar", "text", "set", "enum" %} '{%s= val %}'
	            {% case "date", "datetime" %} '{%s= val %}'
	            {% case "int", "tinyint" %}   '{%s= val %}'
	            {% case "set enum" %}
                    {% code
                        fields := enumValidator.FindAllStringSubmatch(fieldStruct.COLUMN_TYPE, -1)
                        comma  := ""
                    %}
                    [
                    {% for _, value := range fields %}
                            {%s comma %}'{%s= value[len(value)-1] %}'
                            {% code comma = "," %}
                    {% endfor %}
                    ]
	            {% case "blob" %} '<image src="/images/expand_hover.png" />'
	            {% default %} "{%s val %}"
	            {% endswitch %},
            {% endfor %}
            },
        {% endfor %}
        ];
{% endstripspace %}
     {% endcollapsespace %}
			app.toFixedOne = function(value){
				return value.toFixed(1);
			};
			app.toPercentage = function(value){
				return Math.round(value * 10000)/100 + '%';
			};
		</script>
{% endfunc %}

{% func (query *QueryStruct) renderHeadTables() %}
<link href="/tables.css" rel="stylesheet">
<script src="/tables.js"></script>
<div class="table">
<div class='thead' id='thead' >
    <div class='tr' >
        {% code
            var figure, filterFields string
            if query.Order == "" {
                        query.Order = "id"
            }
        %}
            {% for idx, fieldName := range query.columns %}
                {% code
                        fieldStruct := query.fields[idx]
                        key, titleFull, titleLabel := fieldStruct.COLUMN_NAME, fieldStruct.COLUMN_COMMENT, fieldStruct.COLUMN_COMMENT
                        if fieldStruct.InputType == "" {
                            fieldStruct.InputType = forms.StyleInput(fieldStruct.DATA_TYPE)
                        }
                        width, maxLen := forms.GetLengthFromType(fieldStruct.InputType)

                        if (fieldStruct.DATA_TYPE == "varchar") && (fieldStruct.CHARACTER_MAXIMUM_LENGTH == 255) {
                            width, maxLen = 200, 100
                        }
                         fieldStruct.CSSStyle = fmt.Sprintf("width:%dpx;", width)
                         query.widthTable += width
                         filterFields     += inputFilterField(key,  query.Tables[0].Name, fieldStruct )
                       if len(titleFull) > maxLen {

                            if pos := strings.LastIndex(titleFull[:maxLen+1], " "); pos > 0 {
                                titleLabel = titleFull[:pos] + "..."
                            } else {
                                titleLabel = titleFull[:maxLen] + "..."
                            }
                        }

                        if titleLabel == "" {
                            titleLabel = fieldName
                        }
                %}
                {% comment %} Здесь объединяем колонки в группы {% endcomment %}
                {% if figure != fieldStruct.Figure %}
                    {% if figure > "" %}
                        </div>
                    {% endif %}
                    {%code
                        figure = fieldStruct.Figure
                    %}
                    {% if figure > "" %}
                            <div class='td-outer' style="outline: 1px inset gray;">
                                <div class='th' style="outline: 1px outset gray; padding-top: 1px;"> {%s figure %}</div>
                    {% endif %}
                {% endif %}
                 <div title="{%s fieldName %}" class="td{% if fieldName == query.Order %} td-order{% endif %}"
                 style="{%s fieldStruct.CSSStyle %}">
                   <a href="{%s query.Href %}/?order={%s fieldName %}" title="{%s titleFull %}">{%s titleLabel %}</a>
                </div>
            {% endfor %}
            {% if figure > "" %}
                </div>
            {% endif %}
    </div>
    <form name='fFilter' id='fFilter' class='form-simple tr thead' role='form' action='{%s query.Href %}/?filter' method='post'
    target='content' style='width:auto;$style' onsubmit='return SaveObject( this );' enctype='multipart/form-data'
    oninput='return FormIsModified(event, this);' onabort="alert('fFilter');">
        <output name="State" ></output>
        <input name="{%s query.Tables[0].Name %}" hidden />
        {%s= filterFields %}
    </form>
</div>
{% endfunc %}
{% func (query *QueryStruct) RenderTable() %}
        {%  code
            if err := query.beforeRender(); err != nil {
                return
            }
        %}
        {%= query.renderHeadTables() %}
        {%= query.renderBodyTables() %}
{% endfunc %}
{% func  ShowTable(tableName string, fields forms.FieldsTable, rows *sql.Rows) %}
        {%  code
            var query QueryStruct
            query.Rows = rows
            query.Href = "/admin/table/" + tableName
            query.HrefEdit = "/admin/row/edit/?table=" + tableName + "&id="
            query.Tables = append(query.Tables, &fields)

            if err := query.beforeRender(); err != nil {
                return
            }
        %}
        {%= query.renderHeadTables() %}
        {%= query.renderBodyTables() %}
{% endfunc %}
{% func (query *QueryStruct) renderBodyTables() %}
<div id="table_body" >
        {% for query.Rows.Next() %}
            {%  code
                if err := query.Rows.Scan(query.row...); err != nil {
                    log.Println(err)
                    continue
                }

                required, tablePrefix, titleLabel := "", "", ""
            %}
        <div class='tr' style='$style_div'>
            {% for idx, rawField := range query.row %}
                {% code
                    var fieldStruct *forms.FieldStructure

                    switch rawField.(type) {
                        case *forms.FieldStructure:
                            fieldStruct = rawField.(*forms.FieldStructure)
                        default:
                            fieldStruct = query.fields[idx]
                    }
                    key := fieldStruct.COLUMN_NAME
                    val := fieldStruct.Value
                    fields := fieldStruct.Table
                    nameInput := tablePrefix + key
                    dataJson := ""
                     if dataJson > "" {
                         dataJson = fmt.Sprintf(`data-names="{% s}"`, dataJson )
                     }
                   events := ""
                    for name, funcName := range fieldStruct.Events {
                        events += fmt.Sprintf(`%s="return %s;"`, name, funcName)
                    }
                %}
                <div name="{%s key %}" class="td {%s= required %} field-{%s nameInput %} {%s fieldStruct.CSSClass %}"
                         style="{%s fieldStruct.CSSStyle %};margin:auto; height:auto;">
                {% if idx==0 %}
                    <a href="{%s= query.HrefEdit %}{%s val %}" target="content">{%s val %}</a>
                    {%code
                        tablePrefix = fields.Name
                        fields.ID, _ = strconv.Atoi(val)
                    %}
                {% elseif fieldStruct.Html > "" %}
                    {%s= fieldStruct.Html %}
                {% else %}
                {% comment %}
                {% endcomment %}
                        {% if key=="parent_id" %}
                            {%= fieldStruct.RenderParentSelect(fields.Name, key, val, titleLabel, required, events, dataJson) %}
                        {% elseif strings.HasPrefix(key, "id_") %}
                            {%= fieldStruct.RenderForeignSelect(tablePrefix, key, val, titleLabel, required, events, dataJson) %}
                        {% elseif strings.HasPrefix(key, "setid_") || strings.HasPrefix(key, "nodeid_") %}
                            {%= fieldStruct.RenderMultiSelect(fields, tablePrefix, key, val, "См. ", required) %}
                        {% elseif strings.HasPrefix(key, "tableid_") %}
                            {%= fieldStruct.RenderTable(fields, tablePrefix, key, val, "Табл", required) %}
                        {%  else %}
                            {% switch fieldStruct.DATA_TYPE %}
                            {% case "tinyint" %}
                                    {% code
                                        checked := ""
                                        if (val == "1") {
                                            checked = "checked"
                                        }
                                    %}
                                    {%= forms.RenderCheckBox(nameInput, "1", titleLabel, 1, checked, required, events, dataJson) %}
                            {% case "enum" %}
                                {%code t := fieldStruct.RenderEnum(nameInput, val, required, events, dataJson) %}
                                {%s= t %}
                            {% case "set" %}
                                {%code t := fieldStruct.RenderSet(nameInput, val, required, events, dataJson) %}
                                {%s= t %}
                            {% case "text" %}
                                <p id="{%s key %}" name="{%s nameInput %}" class="controls"  {%s= events %} {%s= dataJson %}>
                                    {%s= val %}
                                </p>
                            {% case "blob" %}
                                <image src="/images/expand_hover.png" />
                            {% default %}
                                {% if fieldStruct.LinkTD > "" %}
                                 <a href="{%s= fieldStruct.LinkTD %}?id={%d fields.ID %}" target="_blank">{%s val %}</a>
                                 {% else %}
                                    {%s val %}
                                 {% endif %}
                            {% endswitch %}
                        {% endif %}
                {% endif %}
                </div> <!-- field -->
            {%  endfor %}
            {% for _, fieldStruct := range query.PostFields %}
                <div name="{%s fieldStruct.COLUMN_NAME %}" class="td {%s fieldStruct.CSSClass %}"
                         style="{%s fieldStruct.CSSStyle %};margin:auto; height:auto;" >
                    {%s= fieldStruct.Html %}
                </div> <!-- field -->
            {%  endfor %}
        </div> <!-- tr -->
        {%  endfor %}
    </div>
</div>
{% endfunc %}
{% func renderFilterSelect(key string, fieldStruct *forms.FieldStructure) %}
    <select id="{%s key %}" name="{%s key %}" onchange="return FilterIsModified( event, this);">
        <option selected>-</option>
        {%s= fieldStruct.Html %}
    </select>
{% endfunc %}
{% func inputFilterField(key, nameTable string, fieldStruct *forms.FieldStructure) %}
 <div title="{%s key %}" class="td" style="{%s= fieldStruct.CSSStyle %}">
                        {% if key=="parent_id" %}
                                {%code fieldStruct.GetOptions(nameTable, "") %}
                                {%= renderFilterSelect(key, fieldStruct) %}
                        {% elseif strings.HasPrefix(key, "id_") %}
                                {%code fieldStruct.GetOptions(key[3:], "") %}
                                {%= renderFilterSelect(key, fieldStruct) %}
                        {%  else %}
                            {% switch fieldStruct.DATA_TYPE %}
                            {% case "tinyint" %}
                                    {%= forms.RenderCheckBox(key, "1", "", 1, "", "", "", "") %}
                            {% case "enum" %}
                                {%code t := fieldStruct.RenderEnum(key, "", "", "", "") %}
                                {%s= t %}
                            {% case "set" %}
                                {%code t := fieldStruct.RenderSet(key, "", "", "", "") %}
                                {%s= t %}
               {% default %}
                        <input id="{%s key %}" name="{%s key %}" type=

                        {% if fieldStruct.InputType > "" %}
                            "{%s fieldStruct.InputType %}"
                        {% elseif fieldStruct.DATA_TYPE=="int" || fieldStruct.DATA_TYPE=="double" %}
                            "number" {% if strings.Contains(fieldStruct.COLUMN_TYPE, "unsigned") %}min="0"{% endif %}
                        {% elseif fieldStruct.DATA_TYPE=="date" %}
                            "date"  {%= fieldStruct.RenderDateAttributtes() %}
                        {% elseif fieldStruct.DATA_TYPE=="datetime" %}
                            "datetime" {%= fieldStruct.RenderDateAttributtes() %}
                        {% elseif strings.Contains(key, "email") %}
                            "email"
                        {% else %}
                            "text"
                               {% if fieldStruct.CHARACTER_MAXIMUM_LENGTH>0 %}
                                    maxlength="{%d fieldStruct.CHARACTER_MAXIMUM_LENGTH %}"
                               {% endif %}
                        {% endif %}
                        onkeyup="return FilterIsModified( event, this);"
                        />
               {% endswitch %}
        {% endif %}
  </div>
{% endfunc %}