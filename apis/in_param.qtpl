{% import (
	"go/types"

	jsoniter "github.com/json-iterator/go"

	"github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/httpgo/typesExt"
	"github.com/ruslanBik4/httpgo/views/templates/json"

)
%}

{% code
type qInParam struct {
    in string
    dto any
    multiPart bool
}

func NewqInParam(in string, dto any) *qInParam {
    return &qInParam{
        in: in,
        dto: dto,
        multiPart: in == "body",
    }
} 
%}

{% stripspace %}
{% collapsespace %}

{%- func (q *qInParam) SwaggerParams(params []any) -%}
{%- if !q.multiPart %}
  {%- if q.dto != nil -%}
"requestBody": {
  "content": {
    "application/json": {
      "schema": {%= json.Wrap(q.dto) %}
    },
   },
  },
{%- endif -%}
"parameters":[{%= q.swaggerParams(params) %}]
{%- else -%}
"requestBody": {
  "content": {
  {%- if q.dto != nil -%}
    "application/json": {
      "schema": {%= json.Wrap(q.dto) %}
    },
  {%- endif -%}
    "multipart/form-data": {
      "schema": {
        "type": "object",
        "properties": {{%= q.swaggerParams(params) %}}
      }
    }
 }
}
{%- endif -%}
{%- endfunc -%}

{%- func (q *qInParam) swaggerParams(params []any) -%}
 {%- for i, p := range params -%}
	{%- if i > 0 -%}, {% endif %}

	{%- if param, ok := p.(InParam); ok -%}
		{%- if t, ok := param.Type.(jsoniter.ValEncoder); ok -%}
		{%- code
			s, err := jsoniter.MarshalToString(t)
			if err != nil {
				logs.ErrorLog(err)
			}
		-%}
    	{%s s %}
        {%- else -%}
		{%- if !q.multiPart %}{"name":"{%s param.Name %}",
		{%- else -%} "{%s param.Name %}":{
		{%- endif -%}
		"description": "{%s param.Desc %}",
		{%- if !q.multiPart %}
			"in": "{%s q.in %}",
			"schema": {
	    {%- endif -%}
			{%= Schema(param) %}
		{%- if !q.multiPart %}}{%- endif -%}
		}
        {%- endif -%}
    {%- else -%}
        { {%= json.Wrap(p) %} }
    {%- endif -%}
 {%- endfor -%}
{%- endfunc -%}

{%- func (q *qInParam) SwaggerProperties(params []InParam) -%}
"properties": {
 {%- for i, param := range params -%}
	"{%s param.Name %}": {
		"description": "{%s= param.Desc %}",
		{%= Schema(param) %}
	}{%- if i+1 < len(params) -%}, {%- endif -%}
 {%- endfor -%}
}
{%- endfunc -%}
{%- func Bearer(name, desc string) -%}
"components": {
  "securitySchemes": {
	"{%s name %}":{
	  "description": "{%j desc %}",
	  "type": "http",
	  "scheme": "bearer",
	  "bearerFormat": "JWT",
	}
  }
}
{%- endfunc -%}
{%- func Schema(param InParam) -%}
{%- code
	t, ok := (param.Type).(TypeInParam)
-%}
	{%- if param.Req -%}
		"required": true,
		"allowEmptyValue": false,
	{%- endif -%}
		"type": {%- switch  -%}
				{%- case param.Type == nil -%} nil
				{%- case ok && t.BasicKind == types.Bool-%} "boolean"
				{%- case ok && t.BasicKind == types.UnsafePointer -%} "file"
				{%- case ok && t.BasicKind == types.String -%}
					{%- if t.IsSlice() -%} "array", "items": {"type": "string"} {%- else -%} "string" {%- endif -%},
		"format": 	"string"
				{%- case ok && t.BasicKind > types.Bool && t.BasicKind < types.Float32 -%} "integer",
		"format": 	"{%= t.Format() %}"
				{%- case ok && (t.BasicKind == types.Float32 || t.BasicKind == types.Float64) -%} "number",
		"format": 	"{%= t.Format() %}"
				{%- case ok && t.BasicKind > types.UnsafePointer -%} "untyped",
		"format": 	"{%= t.Format() %}"
				{%- case ok && t.BasicKind == typesExt.TStruct -%} "{%= t.RequestType() %}",
		"format":   "{%= t.Format() %}"
				{%- case ok -%} "{%= t.Format() %}",
		"format": 	"{%= t.Format() %}"
				{%- default -%} "{%v param.Type %}",
		"format": 	"{%v param.Type %}"
				{%- endswitch -%}
{%- endfunc -%}
{%- func Security(desc string) -%}
"security": [
  "auth":  "JWT"
]
{%- endfunc -%}
{% endcollapsespace %}
{% endstripspace %}
