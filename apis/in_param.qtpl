{% import (
	"go/types"

	"github.com/ruslanBik4/gotools/typesExt"
	"github.com/ruslanBik4/httpgo/views/templates/json"

)
%}

{% code
type qInParam struct {
    in string
    dto any
    multiPart bool
    params []InParam
    requireds []string
}

func NewqInParam(in string, dto any, multiPart bool, params ...InParam) *qInParam {
    return &qInParam{
        in: in,
        dto: dto,
        multiPart: multiPart,
        params: params,
    }
}
%}

{% stripspace %}
{% collapsespace %}

{%- func (q *qInParam) SwaggerParams() -%}
{%- if q.multiPart || q.dto != nil -%}
"requestBody": {
  "content": {
    {%= q.writeDTO() %}
    {%= q.writeMultiPart() %}
 }
}
{%- else -%}
"parameters":[{%= q.swaggerParams() %}]
{%- endif -%}
{%- endfunc -%}

{%- func (q *qInParam) writeDTO() -%}
  {%- if q.dto != nil -%}
    "application/json": {
      "schema": {%= json.Wrap(q.dto) %}
    },
  {%- endif -%}
{%- endfunc -%}

{%- func (q *qInParam) writeMultiPart() -%}
{%- if q.multiPart %}
    "multipart/form-data": {
      "schema": {
        "type": "object",
        "properties": {{%= q.swaggerProperties() %}}
        {%- if len(q.requireds) > 0 -%},"required": {%= json.Wrap(q.requireds) %} {%- endif -%}
      }
  }
{%- endif -%}
{%- endfunc -%}

{%- func (q *qInParam) swaggerParamProps(param InParam) -%}
	"description": "{%s param.Desc %}",
	{%- if param.DefValue != nil -%} "example": "{%v param.defaultValueOfParams(nil, nil) %}",{%- endif -%}
	{%- if param.Req -%}
		{%- if q.multiPart -%} {%code q.requireds =append(q.requireds, param.Name) %}
		{%- else -%}
		"required": true,
		{%- if param.DefValue == nil -%} "allowEmptyValue": false,{%- endif -%}
	{%- endif -%}
	{%- endif -%}
{%- endfunc -%}

{%- func (q *qInParam) swaggerProperties() -%}
 {%- for i, param := range q.params -%}
    "{%s param.Name %}":{
    {%= q.swaggerParamProps(param) %}
	{%- if t, ok := param.Type.(HeaderInParam); ok -%}
		"in": "header",
		{% code param.Type = t.TypeInParam %}
    {%- endif -%}
	{%= q.Schema(param) %}
    }{%- if i+1 < len(q.params) -%}, {%- endif -%}
 {%- endfor -%}
{%- endfunc -%}

{%- func (q *qInParam) swaggerParams() -%}
 {%- for i, param := range q.params -%}
	{"name":"{%s param.Name %}",
    {%= q.swaggerParamProps(param) %}
	{%- if t, ok := param.Type.(HeaderInParam); ok -%}
		"in": "header",
		{% code param.Type = t.TypeInParam %}
    {%- else -%}
		"in": "{%s q.in %}",
	{%- endif -%}
	"schema":	{{%= q.Schema(param) %}}
    }{%- if i+1 < len(q.params) -%}, {%- endif -%}
 {%- endfor -%}
{%- endfunc -%}

{%- func (q *qInParam) SwaggerProperties() -%}
"properties": {
 {%- for i, param := range q.params -%}
	"{%s param.Name %}": {
        {%= q.swaggerParamProps(param) %}
		{%= q.Schema(param) %}
	}{%- if i+1 < len(q.params) -%}, {%- endif -%}
 {%- endfor -%}
}
{%- endfunc -%}
{%- func Bearer(name, desc string) -%}
"components": {
  "securitySchemes": {
	"{%s name %}":{
	  "description": "{%j desc %}",
	  "type": "http",
	  "scheme": "bearer",
	  "bearerFormat": "JWT",
	}
  }
}
{%- endfunc -%}
{%- func (q *qInParam) Schema(param InParam) -%}
{%- code
	t, ok := (param.Type).(TypeInParam)
-%}
		"type": {%- switch  -%}
				{%- case param.Type == nil -%} nil
				{%- case ok && t.BasicKind == types.Bool-%} "boolean"
				{%- case ok && t.BasicKind == types.UnsafePointer -%} "file"
				{%- case ok && t.BasicKind == types.String -%}
					{%- if t.IsSlice() -%} "array", "items": {"type": "string"} {%- else -%} "string" {%- endif -%},
		"format": 	"string"
				{%- case ok && t.BasicKind > types.Bool && t.BasicKind < types.Float32 -%} "integer",
		"format": 	"{%= t.Format() %}"
				{%- case ok && (t.BasicKind == types.Float32 || t.BasicKind == types.Float64) -%} "number",
		"format": 	"{%= t.Format() %}"
				{%- case ok && t.BasicKind > types.UnsafePointer -%} "untyped",
		"format": 	"{%= t.Format() %}"
				{%- case ok && t.BasicKind == typesExt.TStruct -%} "object",
		"format":   "{%= t.Format() %}"
				{%- case ok && t.DTO != nil -%} "object",
		"format": 	"{%v t.DTO %}"
				{%- case ok -%} "{%= t.Format() %}",
		"format": 	"{%= t.Format() %}"
				{%- default -%}
				{%- if d, ok := (param.Type).(Docs); ok -%} "{%s= d.RequestType() %}",
        "format": 	"{%s= d.FormatDoc() %}"
				{%- else -%} "{%v param.Type %}",
		"format": 	"{%v param.Type %}"
				{%-endif -%}
				{%- endswitch -%}
{%- endfunc -%}
{%- func Security(desc string) -%} "security": [ "auth":  "JWT"]
{%- endfunc -%}
{% endcollapsespace %}
{% endstripspace %}
