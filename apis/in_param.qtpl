{% import (
	"go/types"

	jsoniter "github.com/json-iterator/go"

	"github.com/ruslanBik4/logs"
	"github.com/ruslanBik4/httpgo/typesExt"
	"github.com/ruslanBik4/httpgo/views/templates/json"

)
%}

{% code
type qInParam struct {
    in string
}

func NewqInParam(in string) *qInParam {
    return &qInParam{
        in: in,
    }
} 
%}
{%- func (q *qInParam) SwaggerParams(params []any) -%}
"parameters": [
 {%- for i, p := range params -%}
	{%- if i > 0 -%}, {% endif %}
	{
	{%- if param, ok := p.(InParam); ok -%}
		{%- if t, ok := param.Type.(jsoniter.ValEncoder); ok -%}
		{%- code
			s, err := jsoniter.MarshalToString(t)
			if err != nil {
				logs.ErrorLog(err)
			}
		-%}
    	{%s s %}
        {%- else -%}
		"name": "{%s param.Name %}",
		"description": "{%s param.Desc %}",
		"in": "{%s q.in %}",
		"schema": {
		{%= Schema(param) %}
		}
        {%- endif -%}
    {%- else -%}
        {%= json.Wrap(p) %}
    {%- endif -%}
    }
 {%- endfor -%}
]
{%- endfunc -%}

{%- func (q *qInParam) SwaggerProperties(params []InParam) -%}
"properties": {
 {%- for i, param := range params -%}
	{%- if i > 0 -%}, {% endif %}
	"{%s param.Name %}": {
		"description": "{%s param.Desc %}",
		{%= Schema(param) %}
	}
 {%- endfor -%}
}
{%- endfunc -%}
{%- func Bearer(name, desc string) -%}
"components": {
  "securitySchemes": {
	"{%s name %}":{
	  "description": "{%j desc %}",
	  "type": "http",
	  "scheme": "bearer",
	  "bearerFormat": "JWT",
	}
  }
}
{%- endfunc -%}
{%- func Schema(param InParam) -%}
		"type": {%- switch t, ok := (param.Type).(TypeInParam); -%} {
				{%- case ok && t.BasicKind == types.Bool-%}
					"boolean"
				{%- case ok && t.BasicKind > types.Bool && t.BasicKind < types.Float32 -%}
					"integer",
		"format": 	"{%= t.Format() %}"
				{%- case ok && (t.BasicKind == types.Float32 || t.BasicKind == types.Float64) -%}
					"number",
		"format": 	"{%= t.Format() %}"
				{%- case ok && t.BasicKind == types.String -%}
					{%- if t.IsSlice() -%} "array", "items": {"type": "string"} {%- else -%} "string" {% endif -%},
		"format": 	"string"
				{%- case ok && t.BasicKind > types.UnsafePointer -%}
					"untyped",
		"format": 	"{%= t.Format() %}"
				{%- case ok && t.BasicKind == typesExt.TStruct -%}
					"{%= t.RequestType() %}",
		"format":   "{%= t.Format() %}"
				{%- case ok -%}
					"{%= t.Format() %}",
		"format": 	"{%= t.Format() %}"
				{% case param.Type == nil %}
				nil
				{%- default -%}
					"{%v param.Type %}",
		"format": 	"{%v param.Type %}"
				{%- endswitch -%},
{%- endfunc -%}
{%- func Security(desc string) -%}
"security": [
  "auth":  "JWT"
]
{%- endfunc -%}