
{% func (a *ApiMain) CreateMain(packageName string, routes []string) %}
// Code generated by httpgo-gen-go. DO NOT EDIT.
// versions:
// 	httpgo v1.2.6
// source: {%s a.Name %} apiRoute
package main

import (
	"flag"
	"fmt"
	"net"
	"sort"
	{%- switch a.auth -%}
	{% case JWT %}
			},
		},
	{% case OAuth2 %}
	"os"
	"go/types"
	{% endswitch %}
	"path"
	"time"

	"github.com/valyala/fasthttp"
	"golang.org/x/net/context"

	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/dbEngine/dbEngine/psql"
	httpgo "github.com/ruslanBik4/httpgo/httpGo"
	"github.com/ruslanBik4/httpgo/views/templates/layouts"
	"github.com/ruslanBik4/httpgo/views/templates/pages"
	"github.com/ruslanBik4/httpgo/views"
	"github.com/ruslanBik4/httpgo/auth"
	"github.com/ruslanBik4/httpgo/apis"
	"github.com/ruslanBik4/httpgo/apis/crud"
	"github.com/ruslanBik4/logs"
	api "{%s packageName %}/api"
)


const ShowVersion = "/api/version()"
// names of system environment variables
const (
	CFG_PATH    = "configPath"
	WEB_PATH    = "webPath"
	SYSTEM_PATH = "systemPath"
)


var (
	routes = apis.ApiRoutes{
		ShowVersion: {
			Fnc:  HandleVersion,
			Desc: "view version server",
		},
		"/": &apis.ApiRoute{
			Desc: "default endpoint",
			Fnc: HandleIndex,
		},
		"/show/forms/": &apis.ApiRoute{
			Desc: "show form",
			Fnc: func(ctx *fasthttp.RequestCtx) (interface{}, error) {

				switch ctx.UserValue(crud.ParamsName.Name).(string) {
				case "signin":
					views.RenderSignForm(ctx, "")
					return nil, nil
				default:

					return `
				<form action="/auth" target="_modal">
				<select name="type_oauth">
				<option value=2> Github </option>
				</select>
				<input type=submit >
				</form>`, nil
				}
			},
			Params: []apis.InParam{
				crud.ParamsName,
			},
		},
	{% switch a.auth %}
	{% case JWT %}
	{% case OAuth2 %}
		"/callback": &apis.ApiRoute{
			Desc: "default endpoint",
			Fnc: func(ctx *fasthttp.RequestCtx) (interface{}, error) {
				s := ctx.Request.URI().QueryArgs().String()
				logs.StatusLog(s)
				a, ok := ctx.UserValue(apis.AuthManager).(*auth.OAuth2)
				if ok {
					token, err := a.Exchange(ctx, string(ctx.Request.URI().QueryArgs().Peek("code")))
					if err != nil {
						return nil, err
					}

					return token.AccessToken, nil
				}

				return s, nil
			},
			// FncAuth: auth.Basic,
		},
		"/auth": &apis.ApiRoute{
			Desc: "*auth* endpoint",
			Fnc: func(ctx *fasthttp.RequestCtx) (interface{}, error) {
				a, ok := ctx.UserValue("auth").(*auth.OAuth2)
				if ok {
					err := a.DoAuth(ctx, auth.AuthServer(ctx.UserValue("type_oauth").(uint8)), "read")
					if err != nil {
						return nil, err
					}
				}
				return nil, nil
			},
			Params: []apis.InParam{
				{
					Name:              "type_oauth",
					Desc:              "",
					Req:               true,
					PartReq:           nil,
					Type:              apis.NewTypeInParam(types.Uint8),
					DefValue:          nil,
					IncompatibleWiths: nil,
					TestValue:         "",
				},
			},
        },
	{% endswitch %}
	}
	fPort     = flag.String("port", ":443", "host address to listen on")
	fPortRdr  = flag.String("port_redirect", ":80", "redirect another proto")
	fNoSecure = flag.Bool("insecure", true, "flag to force https")
	fSystem   = flag.String("path", "./", "path to system files")
	fCfgPath  = flag.String("config_path", "cfg", "path to cfg files")
	fWeb      = flag.String("web", "./", "path to web files")
)

var httpServer *httpgo.HttpGo

func init() {
	flag.Parse()
	listener, err := net.Listen("tcp", *fPort)
	if err != nil {
		// port is occupied - work serve unpassable
		logs.Fatal(err)
	}

	ctxApis := apis.NewCtxApis(0)

	ctxApis.AddValue(CFG_PATH, *fCfgPath)
	ctxApis.AddValue(SYSTEM_PATH, *fSystem)
	ctxApis.AddValue(WEB_PATH, *fWeb)
	DB := getDB(ctxApis)
	if DB == nil {
		panic("wrong DB setting or not found DB")
	}

	ctxApis.AddValue(apis.Database, DB)
	{% switch a.auth %}
	{% case JWT %}
	authBearer := &auth.AuthBearer{}
	{% case OAuth2 %}
	authBearer := auth.NewOAuth2(
		os.Getenv("client_id"),
		os.Getenv("client_secret"),
		"/callback",
	)
	{% endswitch %}
	ctxApis.AddValue(apis.AuthManager, authBearer)

	a := apis.NewApis(ctxApis, initMapRoutes(), authBearer)
	badRoutings := a.AddRoutes(routes)
	if len(badRoutings) > 0 {
		logs.ErrorLog(apis.ErrRouteForbidden, badRoutings)
	}

	cfg, err := httpgo.NewCfgHttp(path.Join(*fSystem, *fCfgPath, "httpgo.yml"))
	if err != nil || cfg == nil {
		// not work without correct config
		logs.ErrorLog(err, "%v or nil cfg (%v), use default", cfg)
		cfg = &httpgo.CfgHttp{
			AccessConf: &httpgo.AccessConf{
				ChkConn:    false,
				AllowIP:    nil,
				DenyIP:     nil,
				Mess:       "",
				AllowRoute: nil,
				DenyRoute:  nil,
			},
			Domains:    nil,
			KillSignal: 0,
			Server:     &fasthttp.Server{},
		}
	}

	httpServer = httpgo.NewHttpgo(cfg, listener, a)

}
// version
var (
	Version string
	Build   string
	Branch  string
)

func main() {
	title, err := HandleVersion(nil)

	t := "https"
	if *fNoSecure {
		t = "http"
	}

	logs.StatusLog("%s starting %s on %s://localhost%s", title, time.Now(), t, *fPort)

	defer func() {
		errRec := recover()
		if err, ok := errRec.(error); ok {
			logs.ErrorLog(err)
		}
	}()

	err = httpServer.Run(
		!(*fNoSecure),
		path.Join(*fSystem, *fCfgPath, "server.crt"),
		path.Join(*fSystem, *fCfgPath, "server.key"))
	if err != nil {
		logs.ErrorLog(err)
	} else {
		logs.StatusLog("Server https correct shutdown at %v", time.Now())
	}
}


// HandleVersion show status httpgo
// @/api/version/
func HandleVersion(ctx *fasthttp.RequestCtx) (interface{}, error) {
	return fmt.Sprintf("{%s a.Name%} (%s) Version: %s, Build Time: %s", Branch, Version, Build), nil
}

func HandleIndex(ctx *fasthttp.RequestCtx) (interface{}, error) {

	content := []byte(`
	{% switch a.auth %}
	{% case JWT %}
	{% case OAuth2 %}
				<html>
				<form action "/auth">
				<select name="type_oauth">
				<option value=2> Github </option>
				</select>
				</form>
    {% endswitch %}
    `)

    body := &pages.IndexPageBody{
    		Name: nil,
    		Pass: nil,
    		TopMenu: []layouts.ItemMenu{
    			{Link: "/swagger.io", Label: "API Rest Docs", Target: "_blank"},
    			{Link: "#", Label: "Tables"},
    			{Link: "#", Label: "Custom forms"},
    		},
    		Catalog: nil,
    		HeadHTML: &layouts.HeadHTMLPage{
    			Title:      "{%s a.Name %}",
    			Language:   "eng",
    			Charset:    "",
    			LinkStyles: nil,
    			MetaTags:   nil,
    			Scripts:    nil,
    		},
    		Title:   "Index page",
    		Content: content,
    	}
	menuViews := layouts.Menu{}
	DB, ok := ctx.UserValue(apis.Database).(*dbEngine.DB)
	if !ok {
		logs.StatusLog(DB, ok)
	} else {
		names := make([]string, 0, len(DB.Tables))
		for name := range DB.Tables {
			names = append(names, name)
		}

		sort.Strings(names)
		for _, name := range names {
			menuViews = append(menuViews, layouts.ItemMenu{
				Link:   "/table/" + name + "/form",
				Label:  name,
				Title:  DB.Tables[name].Comment(),
				Target: "_modal",
			})
		}
	}
	body.TopMenu[1].Content = menuViews.RenderDropdownMenu()

    return nil, views.RenderTemplate(ctx, "index", body)
}

func initMapRoutes() apis.MapRoutes{
	mapRoutes := apis.NewMapRoutes()
    {%- for _, name := range routes -%}
	if badRoutings := mapRoutes.AddRoutes(api.{%s= name %}); len(badRoutings) > 0 {
		logs.ErrorLog(apis.ErrRouteForbidden, badRoutings)
	}
    {%- endfor -%}
    return mapRoutes
}
func getDB(ctx context.Context) *dbEngine.DB {
	dbCfgPath := path.Join("cfg", "DB")
	cfgDB := dbEngine.CfgDB{
		Url:       "",
		GetSchema: &struct{}{},
		PathCfg:   &dbCfgPath,
	}

	conn := psql.NewConn(nil, nil, nil)
	DB, err := dbEngine.NewDB(context.WithValue(ctx, dbEngine.DB_SETTING, cfgDB), conn)
	if err != nil {
		logs.ErrorLog(err, "")
		return nil
	}

	return DB
}
{% endfunc %}
{% func (a *ApiMain) CreateGoMod(packageName string, routes []string) %}
module {%s packageName %}

go 1.18

replace {%s packageName %}/api => ./

require (
	github.com/jackc/pgx/v4 v4.16.1
	github.com/pkg/errors v0.9.1
	github.com/ruslanBik4/dbEngine v1.1.39
	github.com/ruslanBik4/gotools v0.0.0-20220812070354-0ce3c9f73a6f
	github.com/ruslanBik4/httpgo v1.2.14
	github.com/ruslanBik4/logs v0.0.131
	github.com/valyala/fasthttp v1.37.0
	github.com/valyala/fastjson v1.6.3
	github.com/valyala/quicktemplate v1.7.0
)


{% endfunc %}