/*
 * Copyright (c) 2022. Author: Ruslan Bikchentaev. All rights reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 * Першій пріватний програміст.
 */

// Code generated by qtc from "apiMain.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line apiMain.qtpl:3
package tpl

//line apiMain.qtpl:3
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line apiMain.qtpl:3
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line apiMain.qtpl:4
type ApiMain struct {
	Name string
}

func NewApiMain(name string) *ApiMain {
	return &ApiMain{
		name,
	}
}

//line apiMain.qtpl:14
func (a *ApiMain) StreamCreateMain(qw422016 *qt422016.Writer, apiPath string, routes []string) {
//line apiMain.qtpl:14
	qw422016.N().S(`
// Code generated by httpgo-gen-go. DO NOT EDIT.
// versions:
// 	httpgo v1.1.6
// source: `)
//line apiMain.qtpl:18
	qw422016.E().V(a.Name)
//line apiMain.qtpl:18
	qw422016.N().S(` apiRoute
package main

import (
	"flag"
	"fmt"
	"net"
	"path"
	"time"

	"github.com/valyala/fasthttp"
	"golang.org/x/net/context"

	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/dbEngine/dbEngine/psql"
	httpgo "github.com/ruslanBik4/httpgo/httpGo"
	"github.com/ruslanBik4/httpgo/auth"
	"github.com/ruslanBik4/httpgo/apis"
	"github.com/ruslanBik4/logs"
	api "`)
//line apiMain.qtpl:37
	qw422016.E().S(apiPath)
//line apiMain.qtpl:37
	qw422016.N().S(`"
)


const ShowVersion = "/api/version()"
// names of system environment variables
const (
	CFG_PATH    = "configPath"
	WEB_PATH    = "webPath"
	SYSTEM_PATH = "systemPath"
)


var (
	routes = apis.ApiRoutes{
		"/": &apis.ApiRoute{
			Desc: "default endpoint",
			Fnc:  nil,
			// FncAuth: auth.Basic,
		},
		ShowVersion: {
			Fnc:  HandleVersion,
			Desc: "view version server",
		},
		// "/test/": &apis.ApiRoute{
		// 	Desc:   "default endpoint",
		// 	Fnc:    HandleTest,
		// 	Method: apis.POST,
		// },
	}
	fPort     = flag.String("port", ":443", "host address to listen on")
	fPortRdr  = flag.String("port_redirect", ":80", "redirect another proto")
	fNoSecure = flag.Bool("insecure", true, "flag to force https")
	fSystem   = flag.String("path", "./", "path to system files")
	fCfgPath  = flag.String("config_path", "cfg", "path to cfg files")
	fWeb      = flag.String("web", "./", "path to web files")
)

var httpServer *httpgo.HttpGo

func init() {
	flag.Parse()
	listener, err := net.Listen("tcp", *fPort)
	if err != nil {
		// port is occupied - work serve unpossable
		logs.Fatal(err)
	}

	ctxApis := apis.NewCtxApis(0)

	ctxApis.AddValue(CFG_PATH, *fCfgPath)
	ctxApis.AddValue(SYSTEM_PATH, *fSystem)
	ctxApis.AddValue(WEB_PATH, *fWeb)
	DB := getDB(ctxApis)
	if DB == nil {
		panic("wrong DB setting or not found DB")
	}

	ctxApis.AddValue("DB", DB)
	authBearer := &auth.AuthBearer{}
	ctxApis.AddValue("auth", authBearer)

	mapRoutes := apis.NewMapRoutes()
`)
//line apiMain.qtpl:100
	for _, name := range routes {
//line apiMain.qtpl:100
		qw422016.N().S(`
	if badRoutings := mapRoutes.AddRoutes(api.`)
//line apiMain.qtpl:102
		qw422016.N().S(name)
//line apiMain.qtpl:102
		qw422016.N().S(`); len(badRoutings) > 0 {
		logs.ErrorLog(apis.ErrRouteForbidden, badRoutings)
	}

`)
//line apiMain.qtpl:106
	}
//line apiMain.qtpl:106
	qw422016.N().S(`	a := apis.NewApis(ctxApis, mapRoutes, authBearer)
	badRoutings := a.AddRoutes(routes)
	if len(badRoutings) > 0 {
		logs.ErrorLog(apis.ErrRouteForbidden, badRoutings)
	}

	cfg, err := httpgo.NewCfgHttp(path.Join(*fSystem, *fCfgPath, "httpgo.yml"))
	if err != nil || cfg == nil {
		// not work without correct config
		logs.Fatal(err, cfg)
	}

	httpServer = httpgo.NewHttpgo(cfg, listener, a)

}
// version
var (
	Version string
	Build   string
	Branch  string
)

// HandleLogServer show status httpgo
// @/api/version/
func HandleVersion(ctx *fasthttp.RequestCtx) (interface{}, error) {

	return fmt.Sprintf("`)
//line apiMain.qtpl:133
	qw422016.E().S(a.Name)
//line apiMain.qtpl:133
	qw422016.N().S(` (%s) Version: %s, Build Time: %s", Branch, Version, Build), nil
}

func main() {
	title, err := HandleVersion(nil)

	t := "https"
	if *fNoSecure {
		t = "http"
	}

	logs.StatusLog("%s starting %s on port %s (%s)", title, time.Now(), *fPort, t)

	defer func() {
		errRec := recover()
		if err, ok := errRec.(error); ok {
			logs.ErrorLog(err)
		}
	}()

	err = httpServer.Run(
		!(*fNoSecure),
		path.Join(*fSystem, *fCfgPath, "server.crt"),
		path.Join(*fSystem, *fCfgPath, "server.key"))
	if err != nil {
		logs.ErrorLog(err)
	} else {
		logs.StatusLog("Server https correct shutdown at %v", time.Now())
	}
}


func getDB(ctx context.Context) *dbEngine.DB {
	dbCfgPath := path.Join("cfg", "DB")
	cfgDB := dbEngine.CfgDB{
		Url:       "",
		GetSchema: &struct{}{},
		PathCfg:   &dbCfgPath,
	}

	conn := psql.NewConn(nil, nil, nil)
	DB, err := dbEngine.NewDB(context.WithValue(ctx, dbEngine.DB_SETTING, cfgDB), conn)
	if err != nil {
		logs.ErrorLog(err, "")
		return nil
	}

	return DB
}
`)
//line apiMain.qtpl:182
}

//line apiMain.qtpl:182
func (a *ApiMain) WriteCreateMain(qq422016 qtio422016.Writer, apiPath string, routes []string) {
//line apiMain.qtpl:182
	qw422016 := qt422016.AcquireWriter(qq422016)
//line apiMain.qtpl:182
	a.StreamCreateMain(qw422016, apiPath, routes)
//line apiMain.qtpl:182
	qt422016.ReleaseWriter(qw422016)
//line apiMain.qtpl:182
}

//line apiMain.qtpl:182
func (a *ApiMain) CreateMain(apiPath string, routes []string) string {
//line apiMain.qtpl:182
	qb422016 := qt422016.AcquireByteBuffer()
//line apiMain.qtpl:182
	a.WriteCreateMain(qb422016, apiPath, routes)
//line apiMain.qtpl:182
	qs422016 := string(qb422016.B)
//line apiMain.qtpl:182
	qt422016.ReleaseByteBuffer(qb422016)
//line apiMain.qtpl:182
	return qs422016
//line apiMain.qtpl:182
}
