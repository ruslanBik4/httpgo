/*
 * Copyright (c) 2022. Author: Ruslan Bikchentaev. All rights reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 * Першій пріватний програміст.
 */

// Code generated by qtc from "endpointTpl.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line endpointTpl.qtpl:2
package tpl

//line endpointTpl.qtpl:2
import (
	"fmt"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"github.com/iancoleman/strcase"

	"github.com/ruslanBik4/dbEngine/dbEngine"
	"github.com/ruslanBik4/httpgo/apis"
)

//   interface of endpoint
//   // Code generated by httpgo-gen-go. DO NOT EDIT.

//line endpointTpl.qtpl:16
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line endpointTpl.qtpl:16
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line endpointTpl.qtpl:17
type EndpointTpl struct {
	apis.ApiRoute
	dbEngine.Table
}

func NewEndpointTpl(route apis.ApiRoute, table dbEngine.Table) *EndpointTpl {
	return &EndpointTpl{
		route,
		table,
	}
}

//line endpointTpl.qtpl:30
func streamparamName(qw422016 *qt422016.Writer, name string) {
//line endpointTpl.qtpl:31
	qw422016.N().S(cases.Title(language.English, cases.NoLower).String(strcase.ToCamel(name)))
//line endpointTpl.qtpl:32
}

//line endpointTpl.qtpl:32
func writeparamName(qq422016 qtio422016.Writer, name string) {
//line endpointTpl.qtpl:32
	qw422016 := qt422016.AcquireWriter(qq422016)
//line endpointTpl.qtpl:32
	streamparamName(qw422016, name)
//line endpointTpl.qtpl:32
	qt422016.ReleaseWriter(qw422016)
//line endpointTpl.qtpl:32
}

//line endpointTpl.qtpl:32
func paramName(name string) string {
//line endpointTpl.qtpl:32
	qb422016 := qt422016.AcquireByteBuffer()
//line endpointTpl.qtpl:32
	writeparamName(qb422016, name)
//line endpointTpl.qtpl:32
	qs422016 := string(qb422016.B)
//line endpointTpl.qtpl:32
	qt422016.ReleaseByteBuffer(qb422016)
//line endpointTpl.qtpl:32
	return qs422016
//line endpointTpl.qtpl:32
}

//line endpointTpl.qtpl:33
func (e *EndpointTpl) streamdtoName(qw422016 *qt422016.Writer) {
//line endpointTpl.qtpl:34
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:34
	qw422016.N().S(`Fields`)
//line endpointTpl.qtpl:35
}

//line endpointTpl.qtpl:35
func (e *EndpointTpl) writedtoName(qq422016 qtio422016.Writer) {
//line endpointTpl.qtpl:35
	qw422016 := qt422016.AcquireWriter(qq422016)
//line endpointTpl.qtpl:35
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:35
	qt422016.ReleaseWriter(qw422016)
//line endpointTpl.qtpl:35
}

//line endpointTpl.qtpl:35
func (e *EndpointTpl) dtoName() string {
//line endpointTpl.qtpl:35
	qb422016 := qt422016.AcquireByteBuffer()
//line endpointTpl.qtpl:35
	e.writedtoName(qb422016)
//line endpointTpl.qtpl:35
	qs422016 := string(qb422016.B)
//line endpointTpl.qtpl:35
	qt422016.ReleaseByteBuffer(qb422016)
//line endpointTpl.qtpl:35
	return qs422016
//line endpointTpl.qtpl:35
}

//line endpointTpl.qtpl:37
func (e *EndpointTpl) StreamNameRoutes(qw422016 *qt422016.Writer) {
//line endpointTpl.qtpl:38
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:38
	qw422016.N().S(`Routes`)
//line endpointTpl.qtpl:39
}

//line endpointTpl.qtpl:39
func (e *EndpointTpl) WriteNameRoutes(qq422016 qtio422016.Writer) {
//line endpointTpl.qtpl:39
	qw422016 := qt422016.AcquireWriter(qq422016)
//line endpointTpl.qtpl:39
	e.StreamNameRoutes(qw422016)
//line endpointTpl.qtpl:39
	qt422016.ReleaseWriter(qw422016)
//line endpointTpl.qtpl:39
}

//line endpointTpl.qtpl:39
func (e *EndpointTpl) NameRoutes() string {
//line endpointTpl.qtpl:39
	qb422016 := qt422016.AcquireByteBuffer()
//line endpointTpl.qtpl:39
	e.WriteNameRoutes(qb422016)
//line endpointTpl.qtpl:39
	qs422016 := string(qb422016.B)
//line endpointTpl.qtpl:39
	qt422016.ReleaseByteBuffer(qb422016)
//line endpointTpl.qtpl:39
	return qs422016
//line endpointTpl.qtpl:39
}

//line endpointTpl.qtpl:41
func (e *EndpointTpl) StreamRequiredFields(qw422016 *qt422016.Writer) {
//line endpointTpl.qtpl:43
	isNext := false

//line endpointTpl.qtpl:45
	for _, col := range e.Table.Columns() {
//line endpointTpl.qtpl:46
		if col.Primary() {
//line endpointTpl.qtpl:47
			if isNext {
//line endpointTpl.qtpl:47
				qw422016.N().S(`,`)
//line endpointTpl.qtpl:47
			}
//line endpointTpl.qtpl:47
			qw422016.N().S(`"`)
//line endpointTpl.qtpl:48
			qw422016.E().S(col.Name())
//line endpointTpl.qtpl:48
			qw422016.N().S(`"`)
//line endpointTpl.qtpl:49
		}
//line endpointTpl.qtpl:50
	}
//line endpointTpl.qtpl:51
}

//line endpointTpl.qtpl:51
func (e *EndpointTpl) WriteRequiredFields(qq422016 qtio422016.Writer) {
//line endpointTpl.qtpl:51
	qw422016 := qt422016.AcquireWriter(qq422016)
//line endpointTpl.qtpl:51
	e.StreamRequiredFields(qw422016)
//line endpointTpl.qtpl:51
	qt422016.ReleaseWriter(qw422016)
//line endpointTpl.qtpl:51
}

//line endpointTpl.qtpl:51
func (e *EndpointTpl) RequiredFields() string {
//line endpointTpl.qtpl:51
	qb422016 := qt422016.AcquireByteBuffer()
//line endpointTpl.qtpl:51
	e.WriteRequiredFields(qb422016)
//line endpointTpl.qtpl:51
	qs422016 := string(qb422016.B)
//line endpointTpl.qtpl:51
	qt422016.ReleaseByteBuffer(qb422016)
//line endpointTpl.qtpl:51
	return qs422016
//line endpointTpl.qtpl:51
}

//line endpointTpl.qtpl:55
func (e *EndpointTpl) StreamApisFile(qw422016 *qt422016.Writer) {
//line endpointTpl.qtpl:55
	qw422016.N().S(`
type
    `)
//line endpointTpl.qtpl:57
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:57
	qw422016.N().S(` struct {
       `)
//line endpointTpl.qtpl:58
	for _, param := range e.Params {
//line endpointTpl.qtpl:58
		qw422016.N().S(` `)
//line endpointTpl.qtpl:59
		qw422016.N().S(fmt.Sprintf("%-21s", paramName(param.Name)))
//line endpointTpl.qtpl:59
		qw422016.N().S(` `)
//line endpointTpl.qtpl:60
		if t, ok := (param.Type).(apis.TypeInParam); ok && t.DTO != nil {
//line endpointTpl.qtpl:61
			qw422016.N().S(fmt.Sprintf("%T", t.DTO))
//line endpointTpl.qtpl:61
			qw422016.N().S(` `)
//line endpointTpl.qtpl:62
		} else {
//line endpointTpl.qtpl:62
			qw422016.N().S(` `)
//line endpointTpl.qtpl:63
			qw422016.N().S(param.Type.String())
//line endpointTpl.qtpl:63
			qw422016.N().S(` `)
//line endpointTpl.qtpl:64
		}
//line endpointTpl.qtpl:64
		qw422016.N().S(` `)
//line endpointTpl.qtpl:65
		qw422016.N().S(`       `)
//line endpointTpl.qtpl:65
		qw422016.N().S("`")
//line endpointTpl.qtpl:65
		qw422016.N().S(`json:"`)
//line endpointTpl.qtpl:65
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:65
		qw422016.N().S(`"`)
//line endpointTpl.qtpl:65
		qw422016.N().S("`")
//line endpointTpl.qtpl:65
		qw422016.N().S(`
       `)
//line endpointTpl.qtpl:66
	}
//line endpointTpl.qtpl:66
	qw422016.N().S(` Limit                int     `)
//line endpointTpl.qtpl:66
	qw422016.N().S("`")
//line endpointTpl.qtpl:66
	qw422016.N().S(`json:"id_photos"`)
//line endpointTpl.qtpl:66
	qw422016.N().S("`")
//line endpointTpl.qtpl:66
	qw422016.N().S(`
     }
// GetValue implement httpgo.RouteDTO interface
func (r *`)
//line endpointTpl.qtpl:69
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:69
	qw422016.N().S(`) ReadParams(ctx *fasthttp.RequestCtx) {
   `)
//line endpointTpl.qtpl:70
	for _, param := range e.Params {
//line endpointTpl.qtpl:70
		qw422016.N().S(`
        r.`)
//line endpointTpl.qtpl:71
		qw422016.N().S(paramName(param.Name))
//line endpointTpl.qtpl:71
		qw422016.N().S(`, _ = ctx.UserValue("`)
//line endpointTpl.qtpl:71
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:71
		qw422016.N().S(`").(`)
//line endpointTpl.qtpl:72
		if t, ok := (param.Type).(apis.TypeInParam); ok && t.DTO != nil {
//line endpointTpl.qtpl:73
			qw422016.N().S(fmt.Sprintf("%T", t.DTO))
//line endpointTpl.qtpl:74
		} else {
//line endpointTpl.qtpl:75
			qw422016.E().S(param.Type.String())
//line endpointTpl.qtpl:76
		}
//line endpointTpl.qtpl:77
		qw422016.N().S(`)
   `)
//line endpointTpl.qtpl:78
	}
//line endpointTpl.qtpl:78
	qw422016.N().S(`
}
// GetValue implement httpgo.RouteDTO interface
func (r *`)
//line endpointTpl.qtpl:81
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:81
	qw422016.N().S(`) GetValue() interface{} {
	return r
}
// NewValue implement httpgo.RouteDTO interface
func (r *`)
//line endpointTpl.qtpl:85
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:85
	qw422016.N().S(`) NewValue() interface{} {
	return `)
//line endpointTpl.qtpl:86
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:86
	qw422016.N().S(`{}
}
// CheckParams implement CheckDTO interface, put each params into user value on context
func (r *`)
//line endpointTpl.qtpl:89
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:89
	qw422016.N().S(`) CheckParams(ctx *fasthttp.RequestCtx, badParams map[string]string) bool {
	val := fastjson.MustParseBytes(ctx.Request.Body())
`)
//line endpointTpl.qtpl:91
	for _, param := range e.Params {
//line endpointTpl.qtpl:91
		qw422016.N().S(`	if val.Exists("`)
//line endpointTpl.qtpl:92
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:92
		qw422016.N().S(`") {
		ctx.SetUserValue("`)
//line endpointTpl.qtpl:93
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:93
		qw422016.N().S(`", r.`)
//line endpointTpl.qtpl:93
		streamparamName(qw422016, param.Name)
//line endpointTpl.qtpl:93
		qw422016.N().S(`)
	}
`)
//line endpointTpl.qtpl:95
	}
//line endpointTpl.qtpl:95
	qw422016.N().S(`	return true
}
// RefColValue return referral of column
func (r *`)
//line endpointTpl.qtpl:99
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:99
	qw422016.N().S(`) RefColValue(name string) interface{}{
	switch name {
`)
//line endpointTpl.qtpl:101
	for _, param := range e.Params {
//line endpointTpl.qtpl:101
		qw422016.N().S(`	case "`)
//line endpointTpl.qtpl:102
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:102
		qw422016.N().S(`":
        return &r.`)
//line endpointTpl.qtpl:103
		qw422016.N().S(paramName(param.Name))
//line endpointTpl.qtpl:103
		qw422016.N().S(`
`)
//line endpointTpl.qtpl:104
	}
//line endpointTpl.qtpl:104
	qw422016.N().S(`   	default:
		logs.ErrorLog(errors.Errorf("unknown column name '%s'", name))
		return nil
	}
}
// ColValue return value of column
func (r *`)
//line endpointTpl.qtpl:111
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:111
	qw422016.N().S(`) ColValue(name string) interface{}{
	switch name {
`)
//line endpointTpl.qtpl:113
	for _, param := range e.Params {
//line endpointTpl.qtpl:113
		qw422016.N().S(`	case "`)
//line endpointTpl.qtpl:114
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:114
		qw422016.N().S(`":
        return r.`)
//line endpointTpl.qtpl:115
		streamparamName(qw422016, param.Name)
//line endpointTpl.qtpl:115
		qw422016.N().S(`
`)
//line endpointTpl.qtpl:116
	}
//line endpointTpl.qtpl:116
	qw422016.N().S(`   	default:
		logs.ErrorLog(errors.Errorf("unknown column name '%s'", name))
		return nil
	}
}
// GetFields implement dbEngine.RowScanner interface
func (r *`)
//line endpointTpl.qtpl:123
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:123
	qw422016.N().S(`) GetFields(columns []dbEngine.Column) []interface{} {
	v := make([]interface{}, len(columns))
	for i, col := range columns {
		v[i] = r.RefColValue( col.Name() )
	}

	return v
}

// NewValue implement httpgo.RouteDTO interface
func (r *`)
//line endpointTpl.qtpl:133
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:133
	qw422016.N().S(`) SqlOptions(ctx *fasthttp.RequestCtx, isWhere bool) []dbEngine.BuildSqlOptions {
        args := make([]interface{}, 0, `)
//line endpointTpl.qtpl:134
	qw422016.N().D(len(e.Params))
//line endpointTpl.qtpl:134
	qw422016.N().S(`)
        colNames := make([]string, 0, `)
//line endpointTpl.qtpl:135
	qw422016.N().D(len(e.Params))
//line endpointTpl.qtpl:135
	qw422016.N().S(`)
        `)
//line endpointTpl.qtpl:136
	for _, param := range e.Params {
//line endpointTpl.qtpl:136
		qw422016.N().S(`
            if v := ctx.UserValue( "`)
//line endpointTpl.qtpl:137
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:137
		qw422016.N().S(`" ); v != nil {
                args = append(args, v)
                colNames = append(colNames, "`)
//line endpointTpl.qtpl:139
		qw422016.E().S(param.Name)
//line endpointTpl.qtpl:139
		qw422016.N().S(`")
            }
        `)
//line endpointTpl.qtpl:141
	}
//line endpointTpl.qtpl:141
	qw422016.N().S(`

	res := []dbEngine.BuildSqlOptions{
		dbEngine.Args(args...),
	}
	if isWhere {
		res = append(res, dbEngine.WhereForSelect(colNames...) )
	} else {
		res = append(res, dbEngine.Columns(colNames...) )
	}

	if r.Limit > 0 {
		res = append(res, dbEngine.FetchOnlyRows(r.Limit))
	}

	return res
}
var
	`)
//line endpointTpl.qtpl:159
	e.StreamNameRoutes(qw422016)
//line endpointTpl.qtpl:159
	qw422016.N().S(` = apis.ApiRoutes{
		"/table/`)
//line endpointTpl.qtpl:160
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:160
	qw422016.N().S(`/get": {
			Fnc:    Handle`)
//line endpointTpl.qtpl:161
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:161
	qw422016.N().S(`Get,
			Desc:   "get data of table '`)
//line endpointTpl.qtpl:162
	qw422016.E().S(e.Name())
//line endpointTpl.qtpl:162
	qw422016.N().S(`' (`)
//line endpointTpl.qtpl:162
	qw422016.E().S(e.Desc)
//line endpointTpl.qtpl:162
	qw422016.N().S(`)",
			DTO:    &`)
//line endpointTpl.qtpl:163
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:163
	qw422016.N().S(`{},
			Method: apis.GET,
			NeedAuth: true,
		},
		"/table/`)
//line endpointTpl.qtpl:167
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:167
	qw422016.N().S(`/put": {
			Fnc:    Handle`)
//line endpointTpl.qtpl:168
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:168
	qw422016.N().S(`Put,
			Desc:   "`)
//line endpointTpl.qtpl:169
	qw422016.E().S(e.Desc)
//line endpointTpl.qtpl:169
	qw422016.N().S(`",
			DTO:    &`)
//line endpointTpl.qtpl:170
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:170
	qw422016.N().S(`{},
			Multipart: true,
			Method: apis.POST,
			NeedAuth: true,
			Params: []apis.InParam{
			        apis.ParamsGetFormActions,
`)
//line endpointTpl.qtpl:176
	for _, param := range e.Params {
//line endpointTpl.qtpl:176
		qw422016.N().S(`			        `)
//line endpointTpl.qtpl:177
		col := e.Table.FindColumn(param.Name)
		param.Req = !col.IsNullable() && !col.AutoIncrement()

//line endpointTpl.qtpl:178
		qw422016.N().S(`
 		            `)
//line endpointTpl.qtpl:179
		qw422016.N().S(fmt.Sprintf("%g", param))
//line endpointTpl.qtpl:179
		qw422016.N().S(`,
`)
//line endpointTpl.qtpl:180
	}
//line endpointTpl.qtpl:180
	qw422016.N().S(`
            },
		},
		"/table/`)
//line endpointTpl.qtpl:183
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:183
	qw422016.N().S(`/update": {
			Fnc:    Handle`)
//line endpointTpl.qtpl:184
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:184
	qw422016.N().S(`Update,
			Desc:   "`)
//line endpointTpl.qtpl:185
	qw422016.E().S(e.Desc)
//line endpointTpl.qtpl:185
	qw422016.N().S(`",
			DTO:    &`)
//line endpointTpl.qtpl:186
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:186
	qw422016.N().S(`{},
			Method: apis.POST,
			Multipart: true,
			NeedAuth: true,
			Params: []apis.InParam{
			        apis.ParamsGetFormActions,
`)
//line endpointTpl.qtpl:192
	for _, param := range e.Params {
//line endpointTpl.qtpl:192
		qw422016.N().S(` 			        `)
//line endpointTpl.qtpl:193
		col := e.Table.FindColumn(param.Name)
		param.Req = col.Primary()

//line endpointTpl.qtpl:194
		qw422016.N().S(`
		            `)
//line endpointTpl.qtpl:195
		qw422016.N().S(fmt.Sprintf("%g", param))
//line endpointTpl.qtpl:195
		qw422016.N().S(`,
`)
//line endpointTpl.qtpl:196
	}
//line endpointTpl.qtpl:196
	qw422016.N().S(`
            },
		},
		"/table/`)
//line endpointTpl.qtpl:199
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:199
	qw422016.N().S(`/form": {
			Fnc:    Handle`)
//line endpointTpl.qtpl:200
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:200
	qw422016.N().S(`Form,
			Desc:   "get form for insert/update data into '`)
//line endpointTpl.qtpl:201
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:201
	qw422016.N().S(`' (`)
//line endpointTpl.qtpl:201
	qw422016.E().S(e.Desc)
//line endpointTpl.qtpl:201
	qw422016.N().S(`)",
			DTO:    &`)
//line endpointTpl.qtpl:202
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:202
	qw422016.N().S(`{},
			Method: apis.GET,
			NeedAuth: true,
			Params: append(apis.BasicParams, []apis.InParam{
			        apis.ParamsGetFormActions,
`)
//line endpointTpl.qtpl:207
	for _, param := range e.Params {
//line endpointTpl.qtpl:207
		qw422016.N().S(`			        `)
//line endpointTpl.qtpl:208
		param.Req = false

//line endpointTpl.qtpl:208
		qw422016.N().S(`
 		            `)
//line endpointTpl.qtpl:209
		qw422016.N().S(fmt.Sprintf("%g", param))
//line endpointTpl.qtpl:209
		qw422016.N().S(`,
`)
//line endpointTpl.qtpl:210
	}
//line endpointTpl.qtpl:210
	qw422016.N().S(`
            }...),
			WithCors: true,
		},
	}

func Get`)
//line endpointTpl.qtpl:216
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:216
	qw422016.N().S(`Params(ctx *fasthttp.RequestCtx) (dbEngine.Table, *`)
//line endpointTpl.qtpl:216
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:216
	qw422016.N().S(`, error) {
    DB, ok := ctx.UserValue(apis.Database).(*dbEngine.DB)
    if !ok {
        return nil, nil, dbEngine.ErrDBNotFound
    }

    table, ok := DB.Tables["`)
//line endpointTpl.qtpl:222
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:222
	qw422016.N().S(`"]
    if !ok {
        return nil, nil, dbEngine.ErrNotFoundTable{Table: "`)
//line endpointTpl.qtpl:224
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:224
	qw422016.N().S(`"}
    }

    params, ok := ctx.UserValue(apis.JSONParams).(*`)
//line endpointTpl.qtpl:227
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:227
	qw422016.N().S(`)
    if !ok {
        params = &`)
//line endpointTpl.qtpl:229
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:229
	qw422016.N().S(`{}
        params.ReadParams(ctx)
    }

    return table, params, nil
}

func Handle`)
//line endpointTpl.qtpl:236
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:236
	qw422016.N().S(`Get(ctx *fasthttp.RequestCtx) (interface{}, error) {
    table, params, err := Get`)
//line endpointTpl.qtpl:237
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:237
	qw422016.N().S(`Params(ctx)
    if err != nil {
        return nil, errors.Wrap(err, "Handle`)
//line endpointTpl.qtpl:239
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:239
	qw422016.N().S(`Get")
    }

    res := make([]`)
//line endpointTpl.qtpl:242
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:242
	qw422016.N().S(`, 0)
    buf := &`)
//line endpointTpl.qtpl:243
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:243
	qw422016.N().S(`{}
    err = table.SelectAndScanEach(ctx,
        func() error {
            res = append(res, *buf)

            return nil
        },
        buf,
        params.SqlOptions(ctx, true)...
    )
    if err != nil {
        return nil, errors.Wrap(err, "Handle`)
//line endpointTpl.qtpl:254
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:254
	qw422016.N().S(`Get")
    }

    if len(res) == 0 {
        ctx.SetStatusCode(fasthttp.StatusNoContent)
        return nil, nil
    }

    return res, nil
}

func Handle`)
//line endpointTpl.qtpl:265
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:265
	qw422016.N().S(`Put(ctx *fasthttp.RequestCtx) (interface{}, error) {
    table, params, err := Get`)
//line endpointTpl.qtpl:266
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:266
	qw422016.N().S(`Params(ctx)
    if err != nil {
        return nil, errors.Wrap(err, "Handle`)
//line endpointTpl.qtpl:268
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:268
	qw422016.N().S(`Put")
    }

    id, err := table.Insert(ctx, params.SqlOptions(ctx, false)...)
    if err != nil {
        return crud.CreateErrResult(err)
    }

    return crud.RenderCreatedResult(ctx, id, bytes.NewBufferString(""), nil, "/table/`)
//line endpointTpl.qtpl:276
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:276
	qw422016.N().S(`/put")
}

func Handle`)
//line endpointTpl.qtpl:279
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:279
	qw422016.N().S(`Update(ctx *fasthttp.RequestCtx) (interface{}, error) {
    table, params, err := Get`)
//line endpointTpl.qtpl:280
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:280
	qw422016.N().S(`Params(ctx)
    if err != nil {
        return nil, errors.Wrap(err, "Handle`)
//line endpointTpl.qtpl:282
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:282
	qw422016.N().S(`Update")
    }

	badParams := make(map[string]string, 0)
	columns := table.Columns()
	priColumns := make([]string, 0)
    args := make([]interface{}, 0, len(columns))
    colSel := make([]string, 0, len(columns))
	buf := bytes.NewBufferString("")
    for _, col := range columns {
        name := col.Name()
        arg := ctx.UserValue(name)
        if col.Primary() {

			if arg == nil {
				badParams[name] = "required params"
                continue
			}
            if arg := ctx.UserValue("new." + name); arg != nil {
                colSel = append(colSel, name)
                args = append(args, arg)
                _, err := fmt.Fprintf(buf, " %v", arg)
                if err != nil {
                    return nil, err
                }
            }
            priColumns = append(priColumns, name)
            continue
        }
        if arg == nil {
            continue
        }

        crud.AddColumnAndValue(name, table, arg, args, colSel, buf, badParams)
    }

    for _, name := range priColumns {
        args = append(args, ctx.UserValue(name))
    }

    i, err := table.Update(ctx,
        dbEngine.ColumnsForSelect(colSel...),
        dbEngine.WhereForSelect(priColumns...),
        dbEngine.ArgsForSelect(args...),
    )
    if err != nil {
        return nil, err
    }

    if i <= 0 {
        logs.DebugLog(colSel, priColumns)
        logs.DebugLog(args)
        return map[string]string{"update": fmt.Sprintf("%d inserted for request %+v", i, params)}, apis.ErrWrongParamsList
    }

    return crud.RenderAcceptedResult(ctx, colSel, buf, "/table/`)
//line endpointTpl.qtpl:337
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:337
	qw422016.N().S(`/update")
}

func Handle`)
//line endpointTpl.qtpl:340
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:340
	qw422016.N().S(`Form(ctx *fasthttp.RequestCtx) (interface{}, error) {
    table, params, err := Get`)
//line endpointTpl.qtpl:341
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:341
	qw422016.N().S(`Params(ctx)
    if err != nil {
        return nil, errors.Wrap(err, "Handle`)
//line endpointTpl.qtpl:343
	streamparamName(qw422016, e.Name())
//line endpointTpl.qtpl:343
	qw422016.N().S(`Form")
    }

 		// we must copy colsTable into local array
 		f := forms.FormField{
 			Title:       "`)
//line endpointTpl.qtpl:348
	qw422016.E().S(e.Table.Comment())
//line endpointTpl.qtpl:348
	qw422016.N().S(`",
 			Action:      "/table/`)
//line endpointTpl.qtpl:349
	qw422016.E().S(e.Table.Name())
//line endpointTpl.qtpl:349
	qw422016.N().S(`/",
 			Method:      "POST",
 			Description: "",
 		}

	val := fastjson.MustParseBytes(ctx.Request.Body())
 	if val.Exists(`)
//line endpointTpl.qtpl:355
	e.StreamRequiredFields(qw422016)
//line endpointTpl.qtpl:355
	qw422016.N().S(`) {

        record := `)
//line endpointTpl.qtpl:357
	e.streamdtoName(qw422016)
//line endpointTpl.qtpl:357
	qw422016.N().S(`{}
        err = table.SelectOneAndScan(ctx,
            &record,
            params.SqlOptions(ctx, true)...
        )
		if err == pgx.ErrNoRows {
			return map[string]string{`)
//line endpointTpl.qtpl:357
	qw422016.N().S("`")
//line endpointTpl.qtpl:363
	e.StreamRequiredFields(qw422016)
//line endpointTpl.qtpl:363
	qw422016.N().S(``)
//line endpointTpl.qtpl:363
	qw422016.N().S("`")
//line endpointTpl.qtpl:363
	qw422016.N().S(`: err.Error()}, apis.ErrWrongParamsList
		}
        if err != nil {
            return nil, errors.Wrap(err, "")
        }
 			f.Action += "update"
   } else {
   			f.Action += "put"
   }


		colDecors := make([]*forms.ColumnDecor, 0)

		columns := table.Columns()

	priColumns := make([]string, 0)
   for _, col := range columns {
        name := col.Name()
        if col.Primary() {

		 /* 	if arg == nil {
				badParams[name] = "required params"
                continue
			}
          if arg := ctx.UserValue("new." + name); arg != nil {
                colSel = append(colSel, name)
                args = append(args, arg)
                _, err := fmt.Fprintf(buf, " %v", arg)
                if err != nil {
                    return nil, err
                }
            }
         */   priColumns = append(priColumns, name)
            continue
        }
				if !(col.AutoIncrement() || col.Name() == "id" ||
					strings.Contains(col.Comment(), " (read_only)")) {

					colDec := forms.NewColumnDecor(col, nil)
					colDec.IsDisabled = colDec.IsReadOnly && !(colDec.IsHidden)
					colDec.IsSlice = strings.HasPrefix(col.Type(), "_")
					colDec.Value = nil

					if col.Primary() {
						colDec.IsHidden = true
						colDec.InputType = "hidden"
					} else if col.Type() == "text" {
						colDec.InputType = "textarea"
					} else if col.Name() == "id_photos" {
						colDec.InputType = "attachment"
					} else if col.Name() == "memo" {
						colDec.InputType = "markdown"
					}
					colDecors = append(colDecors, colDec)
				}
    }


    		lang, ok := ctx.UserValue(apis.ParamsLang.Name).(string)
    		if ok {
    			colDecors = append(colDecors, &forms.ColumnDecor{
    				Column:      dbEngine.NewStringColumn("lang", "lang", true),
    				IsHidden:    true,
    				InputType:   "hidden",
    				PatternList: nil,
    				Value:       lang,
    			})
    		}

 		btnList := []forms.Button{
 			{ButtonType: "submit", Title: "Insert", Position: true},
 			{ButtonType: "reset", Title: "Clear", Position: false},
 		}

   		blocks := []forms.BlockColumns{
    			{
    				Buttons:     btnList,
    				Columns:     colDecors,
    				Id:          1,
    				Title:       "",
    				Description: "",
    			},
    		}

    		_, ok = ctx.UserValue(apis.ParamsHTML.Name).(bool)
    		if !ok {
    			views.WriteJSONHeaders(ctx)
    		}

    		if f.Description == "" {
    			f.Description = "Input data for " + table.Comment()
    		}
    		f.WriteRenderForm(
    			ctx.Response.BodyWriter(),
    			ok, // && isHtml,
    			blocks...)

    		return nil, nil

}
`)
//line endpointTpl.qtpl:463
}

//line endpointTpl.qtpl:463
func (e *EndpointTpl) WriteApisFile(qq422016 qtio422016.Writer) {
//line endpointTpl.qtpl:463
	qw422016 := qt422016.AcquireWriter(qq422016)
//line endpointTpl.qtpl:463
	e.StreamApisFile(qw422016)
//line endpointTpl.qtpl:463
	qt422016.ReleaseWriter(qw422016)
//line endpointTpl.qtpl:463
}

//line endpointTpl.qtpl:463
func (e *EndpointTpl) ApisFile() string {
//line endpointTpl.qtpl:463
	qb422016 := qt422016.AcquireByteBuffer()
//line endpointTpl.qtpl:463
	e.WriteApisFile(qb422016)
//line endpointTpl.qtpl:463
	qs422016 := string(qb422016.B)
//line endpointTpl.qtpl:463
	qt422016.ReleaseByteBuffer(qb422016)
//line endpointTpl.qtpl:463
	return qs422016
//line endpointTpl.qtpl:463
}
