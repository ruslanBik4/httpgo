
{% import (
    "fmt"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"github.com/iancoleman/strcase"

	"github.com/ruslanBik4/httpgo/apis"
	"github.com/ruslanBik4/dbEngine/dbEngine"
)
%}
  interface of endpoint
  // Code generated by httpgo-gen-go. DO NOT EDIT.
{% code
type EndpointTpl struct {
    apis.ApiRoute
    dbEngine.Table
}

func NewEndpointTpl(route apis.ApiRoute, table dbEngine.Table) *EndpointTpl {
    return &EndpointTpl{
        route,
        table,
    }
}
%}
{% stripspace %}
{% func paramName(name string) %}
{%s= cases.Title(language.English, cases.NoLower).String(strcase.ToCamel(name)) %}
{% endfunc %}
{% func (e *EndpointTpl) dtoName() %}
{%= paramName(e.Name()) %}Fields
{% endfunc %}

{% func (e *EndpointTpl) NameRoutes() %}
{%= paramName(e.Name()) %}Routes
{% endfunc %}

{% endstripspace %}

{% func (e *EndpointTpl) ApisFile() %}
type
    {%= e.dtoName() %} struct {
       {% for _, param := range e.Params %}{% collapsespace %}
       {%s= fmt.Sprintf("%-21s", paramName(param.Name)) %}
       {% if t, ok := (param.Type).(apis.TypeInParam); ok && t.DTO != nil %}
       {%s= fmt.Sprintf("%T", t.DTO) %}
       {% else %}
       {%s= param.Type.String() %}
       {% endif %}
{% endcollapsespace %}       `json:"{%s param.Name %}"`
       {% endfor %} Limit                int     `json:"id_photos"`
     }
// GetValue implement httpgo.RouteDTO interface
func (r *{%= e.dtoName() %}) GetValue() interface{} {
	return r
}
// NewValue implement httpgo.RouteDTO interface
func (r *{%= e.dtoName() %}) NewValue() interface{} {
	return {%= e.dtoName() %}{}
}
// CheckParams implement CheckDTO interface, put each params into user value on context
func (r *{%= e.dtoName() %}) CheckParams(ctx *fasthttp.RequestCtx, badParams map[string]string) bool {
	val := fastjson.MustParseBytes(ctx.Request.Body())
	{%- for _, param := range e.Params -%}
	if val.Exists("{%s param.Name %}") {
		ctx.SetUserValue("{%s param.Name %}", r.{%= paramName(param.Name) %})
	}
	{%- endfor -%}
	return true
}
// RefColValue return referral of column
func (r *{%= e.dtoName() %}) RefColValue(name string) interface{}{
	switch name {
	{%- for _, param := range e.Params -%}
	case "{%s param.Name %}":
        return &r.{%s= paramName(param.Name) %}
	{%- endfor -%}
   	default:
		logs.ErrorLog(errors.Errorf("unknown column name '%s'", name))
		return nil
	}
}
// ColValue return value of column
func (r *{%= e.dtoName() %}) ColValue(name string) interface{}{
	switch name {
	{%- for _, param := range e.Params -%}
	case "{%s param.Name %}":
        return r.{%= paramName(param.Name) %}
	{%- endfor -%}
   	default:
		logs.ErrorLog(errors.Errorf("unknown column name '%s'", name))
		return nil
	}
}
// GetFields implement dbEngine.RowScanner interface
func (r *{%= e.dtoName() %}) GetFields(columns []dbEngine.Column) []interface{} {
	v := make([]interface{}, len(columns))
	for i, col := range columns {
		v[i] = r.RefColValue( col.Name() )
	}

	return v
}

// NewValue implement httpgo.RouteDTO interface
func (r *{%= e.dtoName() %}) SqlOptions(ctx *fasthttp.RequestCtx) []dbEngine.BuildSqlOptions {
        args := make([]interface{}, 0, {%d len(e.Params) %})
        colNames := make([]string, 0, {%d len(e.Params) %})
        {% for _, param := range e.Params %}
            if v := ctx.UserValue( "{%s param.Name%}" ); v != nil {
                args = append(args, v)
                colNames = append(colNames, "{%s param.Name%}")
            }
        {% endfor %}

	res := []dbEngine.BuildSqlOptions{
		dbEngine.WhereForSelect(colNames...),
		dbEngine.ArgsForSelect(args...),
	}

	if r.Limit > 0 {
		res = append(res, dbEngine.FetchOnlyRows(r.Limit))
	}

	return res
}
var
	{%= e.NameRoutes() %} = apis.ApiRoutes{
		"/table/{%s e.Table.Name() %}/get": {
			Fnc:    Handle{%= paramName(e.Name()) %}Get,
			Desc:   "get data of table '{%s e.Name() %}' ({%s e.Desc %})",
			DTO:    &{%= e.dtoName()%}{},
			Method: apis.GET,
			NeedAuth: true,
		},
		"/table/{%s e.Table.Name() %}/put": {
			Fnc:    nil,
			Desc:   "{%s e.Desc %}",
			DTO:    &{%= e.dtoName() %}{},
			Method: apis.POST,
			NeedAuth: true,
		},
		"/table/{%s e.Table.Name() %}/update": {
			Fnc:    nil,
			Desc:   "{%s e.Desc %}",
			DTO:    &{%= e.dtoName() %}{},
			Method: apis.POST,
			NeedAuth: true,
		},
	}

func Handle{%= paramName(e.Name()) %}Get(ctx *fasthttp.RequestCtx) (interface{}, error) {
    DB, ok := ctx.UserValue("DB").(*dbEngine.DB)
    if !ok {
        return nil, dbEngine.ErrDBNotFound
    }

    table, ok := DB.Tables["{%s e.Table.Name() %}"]
    if !ok {
        return nil, dbEngine.ErrNotFoundTable{Table: "{%s e.Table.Name() %}"}
    }

    params, ok := ctx.UserValue(apis.JSONParams).(*{%= e.dtoName() %})
    if !ok {
        return nil, apis.ErrWrongParamsList
    }

    res := make([]{%= e.dtoName() %}, 0)
    buf := &{%= e.dtoName() %}{}
    err := table.SelectAndScanEach(ctx,
        func() error {
            res = append(res, *buf)

            return nil
        },
        buf,
        params.SqlOptions(ctx)...
    )
    if err != nil {
        return nil, errors.Wrap(err, "")
    }

    if len(res) == 0 {
        ctx.SetStatusCode(fasthttp.StatusNoContent)
        return nil, nil
    }

    return res, nil
}
{% endfunc %}